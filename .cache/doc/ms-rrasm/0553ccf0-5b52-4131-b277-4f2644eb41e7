<div class="content"><p>The <b>RRouterDeviceEnum</b> method<a id="Appendix_A_Target_305"></a><a aria-label="Product behavior note 305" href="3bb906f0-b077-47ab-ad11-d8d807afde26#Appendix_A_305" data-linktype="relative-path">&lt;305&gt;</a> retrieves the list of all the
<a href="fc2dfae9-0d04-4e1d-97c9-c51c2dc06c3b#gt_4712ded2-d927-4930-9450-29499f98cef4" data-linktype="relative-path">devices</a> from the
specified server. The <i>hDimServer</i> handle specifies the RRASM server on
which the call is executed. The caller MUST pass a pointer to a valid <a href="95609dbb-56aa-4b1b-a0e2-697864a141bd" data-linktype="relative-path"><b>DIM_INFORMATION_CONTAINER (section 2.2.1.2.1)</b></a>,
where DIM_INFORMATION_CONTAINER.dwBufferSize is initialized to zero (0). The
caller SHOULD free the memory pointed to by pInfoStruct-&gt;pBuffer.  </p><dl>
<dd>
<div><pre> DWORD RRouterDeviceEnum(
   [in] DIM_HANDLE hDimServer,
   [in] DWORD dwLevel,
   [in, out] PDIM_INFORMATION_CONTAINER pInfoStruct,
   [in, out] LPDWORD lpdwTotalEntries
 );
</pre></div>
</dd></dl><p><b>hDimServer: </b>A handle to the RRASM server where
the call is to be executed, see section <a href="1f8cdbcc-9791-4a35-ad78-878b8d110e15" data-linktype="relative-path">3.1.3</a>.</p><p><b>dwLevel: </b>This is of type <b>DWORD</b> and MUST
be set to the following value.</p><dl>
<dd>
<table><thead>
  <tr>
   <th>
   <p>Value</p>
   </th>
   <th>
   <p>Meaning</p>
   </th>
  </tr>
 </thead><tbody><tr>
  <td>
  <p>0</p>
  </td>
  <td>
  <p>After the function returns the memory pointed to by
  pInfoStruct-&gt;pBuffer it is interpreted as array of <a href="034e0660-0800-42ea-aa28-ded31fe1b327" data-linktype="relative-path"><b>MPR_DEVICE_0 (section 2.2.1.2.85)</b></a>.
  The size of the array is determined by <i>lpdwEntriesRead</i>.   </p>
  </td>
 </tr></tbody></table>
</dd></dl><p><b>pInfoStruct: </b>This is a pointer of type <b>DIM_INFORMATION_CONTAINER (section 2.2.1.2.1)</b>,
and pInfoStruct.dwBufferSize is initialized to zero (0). Upon successful
return, the pInfoStruct-&gt;pBuffer is a typecast array of <b>MPR_DEVICE_0 (section 2.2.1.2.85)</b>
and the array size is determined by the value to pointer <i>lpdwTotalEntries</i>.  
</p><p><b>lpdwTotalEntries: </b>This is a pointer to type <b>DWORD</b>
and receives the total number of devices that have been enumerated.</p><p><b>Return Values: </b>A 32-bit, unsigned integer
value that indicates return status. A return value of ERROR_SUCCESS
(0x00000000) indicates that the operation was completed successfully;
otherwise, the return value contains an error code, as specified in <a href="../ms-erref/1bc92ddf-b79e-413c-bbaa-99a5281a6c90" data-linktype="relative-path">[MS-ERREF]</a>
or in section <a href="5c0c991a-0d3d-4fe5-9503-5128d0d49fe1" data-linktype="relative-path">2.2.4</a>.
All values that are not in the table that follows MUST be treated the same by
the RRASM client. </p><dl>
<dd>
<table><thead>
  <tr>
   <th>
   <p>Return value/code</p>
   </th>
   <th>
   <p>Description</p>
   </th>
  </tr>
 </thead><tbody><tr>
  <td>
  <p>ERROR_SUCCESS</p>
  <p>0x00000000</p>
  </td>
  <td>
  <p>The call was successful.</p>
  </td>
 </tr><tr>
  <td>
  <p>ERROR_ACCESS_DENIED</p>
  <p>0x00000005</p>
  </td>
  <td>
  <p>The calling application does not have sufficient
  privileges.</p>
  </td>
 </tr></tbody></table>
</dd></dl><p>The opnum field value for this method is 36.</p><p>When processing this call, the RRASM server MUST do the
following:</p><ul><li><p><span><span> 
</span></span>Validate, as specified in section <a href="9373431f-ed29-4639-9f8b-743267c9f9b6" data-linktype="relative-path">2.1.1.1</a>, whether this
method was called by a client that has access to the method. If the client does
not have access, then return error ERROR_ACCESS_DENIED (0x00000005).</p>
</li><li><p><span><span> 
</span></span>If <i>pInfoStruct</i> is NULL, return an error other than one of
the errors in the preceding table.</p>
</li><li><p><span><span> 
</span></span>If <i>dwLevel</i> is not supported, return an error other than
those in the preceding table.</p>
</li><li><p><span><span> 
</span></span>Call the abstract interface <b>Invoke DIMSVC</b> method
specifying the operation and the parameters to enable RRAS server to perform
the required management task.</p>
</li><li><p><span><span> 
</span></span>If the RRAS server completes the request successfully, place the
returned information in <b>pInfoStruct</b> and set <i>lpdwTotalEntries</i> to
the number of entries returned by RRAS server and return ERROR_SUCCESS
(0x00000000).</p>
</li><li><p><span><span> 
</span></span>Otherwise return the error status provided by RRAS server.</p>
</li></ul><p>No exceptions are thrown beyond those thrown by the
underlying RPC protocol <a href="../ms-rpce/290c38b1-92fe-4229-91e6-4fc376610c15" data-linktype="relative-path">[MS-RPCE]</a>.</p></div>