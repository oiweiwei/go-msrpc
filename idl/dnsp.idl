import "ms-dtyp.idl";

typedef enum {
    ZONE_REQUEST_FILTER_PRIMARY = 0x00000001,
    ZONE_REQUEST_FILTER_SECONDARY = 0x00000002,
    ZONE_REQUEST_FILTER_CACHE = 0x00000004,
    ZONE_REQUEST_FILTER_AUTO = 0x00000008,
    ZONE_REQUEST_FILTER_FORWARD = 0x00000010,
    ZONE_REQUEST_FILTER_REVERSE = 0x00000020,
    ZONE_REQUEST_FILTER_FORWARDER = 0x00000040,
    ZONE_REQUEST_FILTER_STUB = 0x00000080,
    ZONE_REQUEST_FILTER_DS = 0x00000100,
    ZONE_REQUEST_FILTER_NON_DS = 0x00000200,
    ZONE_REQUEST_FILTER_DOMAIN_DP = 0x00000400,
    ZONE_REQUEST_FILTER_FOREST_DP = 0x00000800,
    ZONE_REQUEST_FILTER_CUSTOM_DP = 0x00001000,
    ZONE_REQUEST_FILTER_LEGACY_DP = 0x00002000,
    ZONE_REQUEST_FILTER_ALL = 0x00003FFF
} ZONE_REQUEST_FILTER;

typedef enum {
    DNSSRV_STATID_TIME = 0x00000001,
    DNSSRV_STATID_QUERY = 0x00000002,
    DNSSRV_STATID_QUERY2 = 0x00000004,
    DNSSRV_STATID_RECURSE = 0x00000008,
    DNSSRV_STATID_MASTER = 0x00000010,
    DNSSRV_STATID_SECONDARY = 0x00000020,
    DNSSRV_STATID_WINS = 0x00000040,
    DNSSRV_STATID_WIRE_UPDATE = 0x00000100,
    DNSSRV_STATID_SKWANSEC = 0x00000200,
    DNSSRV_STATID_DS = 0x00000400,
    DNSSRV_STATID_NONWIRE_UPDATE = 0x00000800,
    DNSSRV_STATID_MEMORY = 0x00010000,
    DNSSRV_STATID_TIMEOUT = 0x00020000,
    DNSSRV_STATID_DBASE = 0x00040000,
    DNSSRV_STATID_RECORD = 0x00080000,
    DNSSRV_STATID_PACKET = 0x00100000,
    DNSSRV_STATID_NBSTAT = 0x00200000,
    DNSSRV_STATID_ERRORS = 0x00400000,
    DNSSRV_STATID_CACHE = 0x00800000,
    DNSSRV_STATID_DNSSEC = 0x01000000,
    DNSSRV_STATID_PRIVATE = 0x10000000,
    DNSSRV_STATID_RRL = 0x20000000,
    DNSSRV_STATID_ALL = 0x31FF0F7F
} DNSSRV_STATID;
 
typedef struct _DnsStatHeader
{
    DWORD       StatId;
    WORD        wLength;
    BOOLEAN     fClear;
    UCHAR       fReserved;
}DNSSRV_STAT_HEADER, *PDNSSRV_STAT_HEADER;
 
typedef struct _DnsStat
{
    // DNSSRV_STAT_HEADER  Header;
    DWORD       StatId;
    WORD        wLength;
    BOOLEAN     fClear;
    UCHAR       fReserved;
    [size_is(wLength)]
    BYTE           *    Buffer[]; /* add array declarator */
}DNSSRV_STAT, *PDNSSRV_STAT, *PDNSSRV_STATS;
 
 
typedef struct  _IP4_ARRAY
{
    DWORD           AddrCount;
    [size_is( AddrCount )]  DWORD  AddrArray[];
}
IP4_ARRAY, *PIP4_ARRAY;
 
typedef struct _DnsAddr
{
    CHAR MaxSa[32];
    DWORD  DnsAddrUserDword[8];
}
DNS_ADDR, *PDNS_ADDR;
 
typedef struct _DnsAddrArray
{
    DWORD           MaxCount;
    DWORD           AddrCount;
    DWORD           Tag;
    WORD            Family;
    WORD            WordReserved;
    DWORD           Flags;
    DWORD           MatchFlag;
    DWORD           Reserved1;
    DWORD           Reserved2;
 
    [size_is( AddrCount )]  DNS_ADDR    AddrArray[];
}
DNS_ADDR_ARRAY, *PDNS_ADDR_ARRAY;
 
//
//  RPC buffer type for returned data
//
 
typedef struct _DnssrvRpcBuffer
{
    DWORD                       dwLength;
    [size_is(dwLength)] BYTE    Buffer[];
}
DNS_RPC_BUFFER, *PDNS_RPC_BUFFER;

typedef struct _DnsRpcServerExtension {
    DWORD Extension;
} DNS_RPC_SERVER_EXTENSION, *PDNS_RPC_SERVER_EXTENSION;
 
//
//  Server data types
//
typedef struct _DnsRpcServerInfoW2K
{
    //  version
    //  basic configuration flags
 
    DWORD       dwVersion;
    UCHAR       fBootMethod;
    BOOLEAN     fAdminConfigured;
    BOOLEAN     fAllowUpdate;
    BOOLEAN     fDsAvailable;
 
    //
    //  pointer section
    //
 
    [string] char *      pszServerName;
 
    //  DS container
 
    [string] wchar_t *   pszDsContainer;
 
    //  IP interfaces
 
    PIP4_ARRAY  aipServerAddrs;
    PIP4_ARRAY  aipListenAddrs;
 
    //  forwarders
 
    PIP4_ARRAY  aipForwarders;
 
    //  future extensions
 
    PDNS_RPC_SERVER_EXTENSION      pExtension1;
    PDNS_RPC_SERVER_EXTENSION      pExtension2;
    PDNS_RPC_SERVER_EXTENSION      pExtension3;
    PDNS_RPC_SERVER_EXTENSION      pExtension4;
    PDNS_RPC_SERVER_EXTENSION      pExtension5;
 
    //
    //  DWORD section
    //
 
    //  logging
 
    DWORD       dwLogLevel;
    DWORD       dwDebugLevel;
 
    //  configuration DWORDs
 
    DWORD       dwForwardTimeout;
    DWORD       dwRpcProtocol;
    DWORD       dwNameCheckFlag;
    DWORD       cAddressAnswerLimit;
    DWORD       dwRecursionRetry;
    DWORD       dwRecursionTimeout;
    DWORD       dwMaxCacheTtl;
    DWORD       dwDsPollingInterval;
 
    //  aging / scavenging
 
    DWORD       dwScavengingInterval;
    DWORD       dwDefaultRefreshInterval;
    DWORD       dwDefaultNoRefreshInterval;
 
    DWORD       dwReserveArray[10];
 
    //
    //  BYTE section
    //
    //  configuration flags
 
    BOOLEAN     fAutoReverseZones;
    BOOLEAN     fAutoCacheUpdate;
 
    //  recursion control
 
    BOOLEAN     fRecurseAfterForwarding;
    BOOLEAN     fForwardDelegations;
    BOOLEAN     fNoRecursion;
    BOOLEAN     fSecureResponses;
 
    //  lookup control
 
    BOOLEAN     fRoundRobin;
    BOOLEAN     fLocalNetPriority;
 
    //  BIND compatibility and mimicking
 
    BOOLEAN     fBindSecondaries;
    BOOLEAN     fWriteAuthorityNs;
 
    //  Bells and whistles
 
    BOOLEAN     fStrictFileParsing;
    BOOLEAN     fLooseWildcarding;
 
    //  aging / scavenging
 
    BOOLEAN     fDefaultAgingState;
    BOOLEAN     fReserveArray[15];
}
DNS_RPC_SERVER_INFO_W2K, *PDNS_RPC_SERVER_INFO_W2K;
 
typedef struct _DnsRpcServerInfoDotNet
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
 
    //  basic configuration flags
 
    DWORD       dwVersion;
    UCHAR       fBootMethod;
    BOOLEAN     fAdminConfigured;
    BOOLEAN     fAllowUpdate;
    BOOLEAN     fDsAvailable;
 
    //
    //  pointer section
    //
 
    [string] char *     pszServerName;
 
    //  DS container
 
    [string] wchar_t *  pszDsContainer;
 
    //  IP interfaces
 
    PIP4_ARRAY  aipServerAddrs;
    PIP4_ARRAY  aipListenAddrs;
 
    //  forwarders
 
    PIP4_ARRAY  aipForwarders;
 
    //  logging
 
    PIP4_ARRAY  aipLogFilter;
    [string] wchar_t *   pwszLogFilePath;
 
    //  Server domain/forest
 
    [string] char *      pszDomainName;          //  UTF-8 FQDN
    [string] char *      pszForestName;          //  UTF-8 FQDN
 
    //  Built-in directory partitions
 
    [string] char *      pszDomainDirectoryPartition;    //  UTF-8 FQDN
    [string] char *      pszForestDirectoryPartition;    //  UTF-8 FQDN
 
    //  future extensions
 
    [string] char *      pExtensions[ 6 ];
 
    //
    //  DWORD section
    //
 
    //  logging
 
    DWORD       dwLogLevel;
    DWORD       dwDebugLevel;
 
    //  configuration DWORDs
 
    DWORD       dwForwardTimeout;
    DWORD       dwRpcProtocol;
    DWORD       dwNameCheckFlag;
    DWORD       cAddressAnswerLimit;
    DWORD       dwRecursionRetry;
    DWORD       dwRecursionTimeout;
    DWORD       dwMaxCacheTtl;
    DWORD       dwDsPollingInterval;
    DWORD       dwLocalNetPriorityNetMask;
 
    //  aging and scavenging
 
    DWORD       dwScavengingInterval;
    DWORD       dwDefaultRefreshInterval;
    DWORD       dwDefaultNoRefreshInterval;
    DWORD       dwLastScavengeTime;
 
    //  more logging
 
    DWORD       dwEventLogLevel;
    DWORD       dwLogFileMaxSize;
 
    //  Active Directory information
 
    DWORD       dwDsForestVersion;
    DWORD       dwDsDomainVersion;
    DWORD       dwDsDsaVersion;
 
    DWORD       dwReserveArray[ 4 ];
 
    //
    //  BYTE section
    //
    //  configuration flags
 
    BOOLEAN     fAutoReverseZones;
    BOOLEAN     fAutoCacheUpdate;
 
    //  recursion control
 
    BOOLEAN     fRecurseAfterForwarding;
    BOOLEAN     fForwardDelegations;
    BOOLEAN     fNoRecursion;
    BOOLEAN     fSecureResponses;
 
    //  lookup control
 
    BOOLEAN     fRoundRobin;
    BOOLEAN     fLocalNetPriority;
 
    //  BIND compatibility and mimicking
 
    BOOLEAN     fBindSecondaries;
    BOOLEAN     fWriteAuthorityNs;
 
    //  Bells and whistles
 
    BOOLEAN     fStrictFileParsing;
    BOOLEAN     fLooseWildcarding;
 
    //  aging \ scavenging
 
    BOOLEAN     fDefaultAgingState;
 
    BOOLEAN     fReserveArray[ 15 ];
}
DNS_RPC_SERVER_INFO_DOTNET, *PDNS_RPC_SERVER_INFO_DOTNET;
 
typedef struct _DnsRpcServerInfoLonghorn
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
 
    //  basic configuration flags
 
    DWORD               dwVersion;
    UCHAR               fBootMethod;
    BOOLEAN             fAdminConfigured;
    BOOLEAN             fAllowUpdate;
    BOOLEAN             fDsAvailable;
 
    //
    //  pointer section
    //
 
    [string] char *              pszServerName;
 
    //  DS container
 
    [string] wchar_t *           pszDsContainer;
 
    //  IP interfaces
 
    PDNS_ADDR_ARRAY     aipServerAddrs;
    PDNS_ADDR_ARRAY     aipListenAddrs;
 
    //  forwarders
 
    PDNS_ADDR_ARRAY     aipForwarders;
 
    //  logging
 
    PDNS_ADDR_ARRAY     aipLogFilter;
    [string] wchar_t *           pwszLogFilePath;
 
    //  Server domain/forest
 
    [string] char *              pszDomainName;          //  UTF-8 FQDN
    [string] char *              pszForestName;          //  UTF-8 FQDN
 
    //  Built-in directory partitions
 
    [string] char *      pszDomainDirectoryPartition;    //  UTF-8 FQDN
    [string] char *      pszForestDirectoryPartition;    //  UTF-8 FQDN
 
    //  future extensions
 
    [string] char *              pExtensions[ 6 ];
 
    //
    //  DWORD section
    //
 
    //  logging
 
    DWORD       dwLogLevel;
    DWORD       dwDebugLevel;
 
    //  configuration DWORDs
 
    DWORD       dwForwardTimeout;
    DWORD       dwRpcProtocol;
    DWORD       dwNameCheckFlag;
    DWORD       cAddressAnswerLimit;
    DWORD       dwRecursionRetry;
    DWORD       dwRecursionTimeout;
    DWORD       dwMaxCacheTtl;
    DWORD       dwDsPollingInterval;
    DWORD       dwLocalNetPriorityNetMask;
 
    //  aging and scavenging
 
    DWORD       dwScavengingInterval;
    DWORD       dwDefaultRefreshInterval;
    DWORD       dwDefaultNoRefreshInterval;
    DWORD       dwLastScavengeTime;
 
    //  more logging
 
    DWORD       dwEventLogLevel;
    DWORD       dwLogFileMaxSize;
 
    //  Active Directory information
 
    DWORD       dwDsForestVersion;
    DWORD       dwDsDomainVersion;
    DWORD       dwDsDsaVersion;
    BOOLEAN     fReadOnlyDC;
 
    DWORD       dwReserveArray[ 3 ];
 
    //
    //  BYTE section
    //
    //  configuration flags
 
    BOOLEAN     fAutoReverseZones;
    BOOLEAN     fAutoCacheUpdate;
 
    //  recursion control
 
    BOOLEAN     fRecurseAfterForwarding;
    BOOLEAN     fForwardDelegations;
    BOOLEAN     fNoRecursion;
    BOOLEAN     fSecureResponses;
 
    //  lookup control
 
    BOOLEAN     fRoundRobin;
    BOOLEAN     fLocalNetPriority;
 
    //  BIND compatibility and mimicking
 
    BOOLEAN     fBindSecondaries;
    BOOLEAN     fWriteAuthorityNs;
 
    //  Bells and whistles
 
    BOOLEAN     fStrictFileParsing;
    BOOLEAN     fLooseWildcarding;
 
    //  aging \ scavenging
 
    BOOLEAN     fDefaultAgingState;
 
    BOOLEAN     fReserveArray[ 15 ];
}
DNS_RPC_SERVER_INFO_LONGHORN, *PDNS_RPC_SERVER_INFO_LONGHORN, DNS_RPC_SERVER_INFO, *PDNS_RPC_SERVER_INFO;
 
typedef struct _DnssrvRpcForwardersW2K
{
    DWORD       fRecurseAfterForwarding;
    DWORD       dwForwardTimeout;
    PIP4_ARRAY  aipForwarders;
}
DNS_RPC_FORWARDERS_W2K, *PDNS_RPC_FORWARDERS_W2K;
 
typedef struct _DnssrvRpcForwardersDotNet
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
    DWORD       fRecurseAfterForwarding;
    DWORD       dwForwardTimeout;
    PIP4_ARRAY  aipForwarders;
}
DNS_RPC_FORWARDERS_DOTNET, *PDNS_RPC_FORWARDERS_DOTNET;
 
typedef struct _DnssrvRpcForwardersLonghorn
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
    DWORD               fRecurseAfterForwarding;
    DWORD               dwForwardTimeout;
    PDNS_ADDR_ARRAY     aipForwarders;
}
DNS_RPC_FORWARDERS_LONGHORN, *PDNS_RPC_FORWARDERS_LONGHORN, DNS_RPC_FORWARDERS, *PDNS_RPC_FORWARDERS;
 
//
//  Basic zone data
//
 
//typedef struct _DnssrvRpcZoneFlags
//{
//    DWORD   Paused          : 1;
//    DWORD   Shutdown        : 1;
//    DWORD   Reverse         : 1;
//    DWORD   AutoCreated     : 1;
//    DWORD   DsIntegrated    : 1;
//    DWORD   Aging           : 1;
//    DWORD   Update          : 2;
//    DWORD   ReadOnly        : 1;
//    DWORD   UnUsed          : 23;
//}
//DNS_RPC_ZONE_FLAGS, *PDNS_RPC_ZONE_FLAGS;
 
typedef DWORD DNS_RPC_ZONE_FLAGS, *PDNS_RPC_ZONE_FLAGS;
 
typedef struct _DnssrvRpcZoneW2K
{
    [string] wchar_t *      pszZoneName;
    DNS_RPC_ZONE_FLAGS      Flags;
    UCHAR                   ZoneType;
    UCHAR                   Version;
}
DNS_RPC_ZONE_W2K, *PDNS_RPC_ZONE_W2K;
 
typedef struct _DnssrvRpcZoneDotNet
{
    DWORD                   dwRpcStructureVersion;
    DWORD                   dwReserved0;
    [string] wchar_t *      pszZoneName;
    DNS_RPC_ZONE_FLAGS      Flags;
    UCHAR                   ZoneType;
    UCHAR                   Version;
    DWORD                   dwDpFlags;
    [string] char *         pszDpFqdn;
}
DNS_RPC_ZONE_DOTNET, *PDNS_RPC_ZONE_DOTNET, DNS_RPC_ZONE, *PDNS_RPC_ZONE;
 
 
//
//  Zone enumeration
//
 
typedef struct _DnssrvRpcZoneListW2K
{
    [range(0,500000)]       DWORD               dwZoneCount;
    [size_is(dwZoneCount)]  PDNS_RPC_ZONE_W2K   ZoneArray[];
}
DNS_RPC_ZONE_LIST_W2K, *PDNS_RPC_ZONE_LIST_W2K;
 
typedef struct _DnssrvRpcZoneListDotNet
{
    DWORD                   dwRpcStructureVersion;
    DWORD                   dwReserved0;
    [range(0,500000)]       DWORD                   dwZoneCount;
    [size_is(dwZoneCount)]  PDNS_RPC_ZONE_DOTNET    ZoneArray[];
}
DNS_RPC_ZONE_LIST_DOTNET, *PDNS_RPC_ZONE_LIST_DOTNET, DNS_RPC_ZONE_LIST, *PDNS_RPC_ZONE_LIST;
 
//
//  DNSSEC trust point enumeration
//
 
typedef enum
{
    TRUSTPOINT_STATE_INITIALIZED,
    TRUSTPOINT_STATE_DSPENDING,
    TRUSTPOINT_STATE_ACTIVE,
    TRUSTPOINT_STATE_DELETE_PENDING,
    TRUSTPOINT_STATE_DELETED
}
TRUSTPOINT_STATE, *PTRUSTPOINT_STATE;
 
typedef enum
{
    TRUSTANCHOR_STATE_INITIALIZED,
    TRUSTANCHOR_STATE_DSPENDING,
    TRUSTANCHOR_STATE_DSINVALID,
    TRUSTANCHOR_STATE_ADDPEND,
    TRUSTANCHOR_STATE_VALID,
    TRUSTANCHOR_STATE_MISSING,
    TRUSTANCHOR_STATE_REVOKED,
    TRUSTANCHOR_STATE_DELETED
}
TRUSTANCHOR_STATE, *PTRUSTANCHOR_STATE;
 
typedef struct _DnssrvRpcTrustPoint
{
    DWORD                   dwRpcStructureVersion;
    DWORD                   dwReserved0;
 
    [string] char *         pszTrustPointName;
 
    TRUSTPOINT_STATE        eTrustPointState;
 
    __int64                 i64LastActiveRefreshTime;
    __int64                 i64NextActiveRefreshTime;
    __int64                 i64LastSuccessfulActiveRefreshTime;
    DWORD                   dwLastActiveRefreshResult;
    DWORD                   dwReserved;
}
DNS_RPC_TRUST_POINT, *PDNS_RPC_TRUST_POINT;
 
typedef struct _DnssrvRpcTrustPointList
{
    DWORD                         dwRpcStructureVersion;
    DWORD                         dwReserved0;
 
    [range(0,500000)]             DWORD                   dwTrustPointCount;
    [size_is(dwTrustPointCount)]  PDNS_RPC_TRUST_POINT    TrustPointArray[];
}
DNS_RPC_TRUST_POINT_LIST, *PDNS_RPC_TRUST_POINT_LIST;
 
//
//  Signing Key Descriptor (SKD) definitions for online signing
//
//  Each SKD has a set of static configuration represented by a DNS_RPC_SKD
//  structure that defines how the SKD is used to generate keys and sign
//  records in the zone. Each SKD is uniquely identified by its GUID field,
//  which is dynamically generated by the DNS server when the SKD is created.
//  Information on the dynamic state of the SKD, including identifiers for
//  the current keys associated with the SKD, is represented using the
//  DNS_RPC_SKD_STATE structure.
//
//  Guid: A unique identifier for this SKD.
//
//  pwszKeyStorageProvider: The KSP to use to generate keys.
//
//  fStoreKeysInDirectory: If TRUE, keys will be stored on the zone object
//      in Active Directory. If FALSE, keys will be wrapped in self-signed
//      certificates in the local machine store.
//
//  fIsKSK: TRUE if this SKD represents a Key Signing Key, FALSE for a Zone
//      Signing Key.
//
//  bSigningAlgorithm: DNSSEC signature generation algorithm.
//
//  dwKeyLength: Length, in bits, of keys. Ignored if the algorithm specified
//      by bSigningAlgorithm does not support variable-length keys.
//
//  dwInitialRolloverOffset: Amount of time, in seconds, to delay the first
//      scheduled key rollover. This allows for key rollovers to be staggered.
//
//  dwDNSKEYSignatureValidityPeriod: Amount of time, in seconds, that signatures
//      covering DNSKEY record sets are valid.
//
//  dwDSSignatureValidityPeriod: Amount of time, in seconds, that signatures
//      covering DS record sets are valid.
//
//  dwStandardSignatureValidityPeriod: Amount of time, in seconds, that signatures
//      covering all other record sets are valid.
//
//  dwRolloverType: Key rollover method (see [RFC4641]).
//
//  dwRolloverPeriod: Amount of time, in seconds, between scheduled key rollovers
//      or 0xFFFFFFFF to disable automatic key rollover.
//
//  dwNextRolloverAction: The action to take for this SKD on the next key
//      manual or scheduled key rollover event.
//
 
typedef struct _DnssrvRpcSigningKeyDescriptor
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
 
    GUID                Guid;
    [string] wchar_t*   pwszKeyStorageProvider;
    BOOL                fStoreKeysInDirectory;
    BOOL                fIsKSK;
    BYTE                bSigningAlgorithm;
    DWORD               dwKeyLength;
    DWORD               dwInitialRolloverOffset;
    DWORD               dwDNSKEYSignatureValidityPeriod;
    DWORD               dwDSSignatureValidityPeriod;
    DWORD               dwStandardSignatureValidityPeriod;
    DWORD               dwRolloverType;
    DWORD               dwRolloverPeriod;
    DWORD               dwNextRolloverAction;
    DWORD               dwReserved;
}
DNS_RPC_SKD, *PDNS_RPC_SKD;
 
//
//  For dwActiveKeyScope, dwStandByKeyScope, dwNextKeyScope
//  KeySignScope defines the scope of the key in a signed zone. 
//
 
typedef enum _KeySignScope
{
    //
    //  SIGN_SCOPE_DEFAULT specifies that the scope will be determined by the 
    //  key flags.  That is, KSK is used to sign DNSKEY set only and ZSK is
    //  used to sign all record sets.
    //
    
    SIGN_SCOPE_DEFAULT,
    
    //
    //  A key with SIGN_SCOPE_DNSKEY_ONLY scope will only be used to sign DNSKEY
    //  set.  This gives the user a way to override the ZSK flag when signing.
    //
    
    SIGN_SCOPE_DNSKEY_ONLY,
    
    //
    //  A key with SIGN_SCOPE_ALL_RECORDS scope will be used to sign all record
    //  sets.  This gives the user a way to override the KSK flag when signing.
    //
    
    SIGN_SCOPE_ALL_RECORDS,
    
    //
    //  A key with SIGN_SCOPE_ADD_ONLY scope will be added to zone file, but 
    //  not used for signing.  It is for user to pre-publish a key.
    //
    
    SIGN_SCOPE_ADD_ONLY,
 
    //
    //  A key with SIGN_SCOPE_DO_NOT_PUBLISH will not be added to the zone file,
    //  and will not be used for signing. It's used to remove a key.
    //
 
    SIGN_SCOPE_DO_NOT_PUBLISH,
 
    //
    //  A key with SIGN_SCOPE_REVOKED will be published to the zone with its
    //  "revoked" bit set to TRUE, and will be used to sign the DNSKEY set only.
    //
 
    SIGN_SCOPE_REVOKED
} KeySignScope;
 
//
//  Signing Key Descriptor (SKD) dynamic state extended
//
//
// Guid: Unique identifier for the SKD
//
// dwCurrentRollState: Internal Status for Rollover.
//
// fManualTrigger: TRUE if Rollover was triggered manually.
//
// dwPreRollEventFired: Specifies which Pre Rollover Event has been fired
//
// ftNextKeyGenerationTime: Time at which Next Key was added to the zone.
//    
// dwRevokedOrSwappedDnskeysLength: Length of the Revoked or Swaped DNSKEY RRSet
//
// pRevokedOrSwappedDnskeysBuffer: Pre-Signed DNSKEY RRSet for ZSK swap
//
// dwFinalDnskeysLength: Length of Pre-Signed DNSKEY RRSet
//
// pFinalDnskeys: Pre-Signed DNSKEY RRSet Post Rollover
//    
// eActiveKeyScope: Signing key Scope for the SKD's active key.
//
// eStandbyKeyScope: Signing key Scope for the SKD's standby key.
//
// eNextKeyScope: Signing key Scope for the SKD's next key. 
//
typedef struct _DnsRpcSigningKeyDescriptorStateEx
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
    GUID                Guid;
    DWORD               dwCurrentRollState;
    DWORD               fManualTrigger;
    DWORD               dwPreRollEventFired;     
    FILETIME            ftNextKeyGenerationTime;    
    DWORD               dwRevokedOrSwappedDnskeysLength;
    [size_is(dwRevokedOrSwappedDnskeysLength)]
    BYTE          *    pRevokedOrSwappedDnskeysBuffer[]; /* add array declarator */
    DWORD               dwFinalDnskeysLength;
    [size_is(dwFinalDnskeysLength)]
    BYTE          *    pFinalDnskeys[]; /* add array declarator */
    KeySignScope        eActiveKeyScope;
    KeySignScope        eStandByKeyScope;
    KeySignScope        eNextKeyScope;    
 
}
DNS_RPC_SKD_STATE_EX, *PDNS_RPC_SKD_STATE_EX;
 
//
//  Signing Key Descriptor (SKD) dynamic state
//
//  The static configuration for each SKD is represented by a DNS_RPC_SKD
//  structure. In addition to these static configuration parameters, each SKD
//  also has dynamic configuration associated with it, including pointers to
//  the current keys for the SKD and other information. The collection of
//  dynamic configuration information for each SKD is represented by a
//  DNS_RPC_SKD_STATE structure.
//
//  A signing key pointer string contains a unique identifier for a signing
//  key. For keys stored in the local machine certificate store, this
//  identifier is the certificate serial number. For keys stored in Active
//  Directory, this identifier is a GUID. The matching GUID for a key may be
//  found in one of the values of the key attribute on the zone object along
//  with a binary exported representation of the key. Note that the GUID for
//  a key is not directly related to the GUID for the SKD.
//
//  Guid: Unique identifier for the SKD
//
//  ftLastRolloverTime: The time at which the last rollover event was performed.
//
//  ftNextRolloverTime: The time at which the next rollover action must take place.
//
//  dwState: The current state of this SKD.
//
//  dwCurrentRolloverStatus: Current rollover status of this SKD.
//
//  pwszActiveKey: Signing key pointer string for the SKD's active key.
//
//  pwszStandbyKey: Signing key pointer string for the SKD's standby key.
//
//  pwszNextKey: Signing key pointer string for the SKD's next key. This key
//      will be used during the next key rollover event.
//
 
typedef struct _DnsRpcSigningKeyDescriptorState
{
    DWORD                   dwRpcStructureVersion;
    DWORD                   dwReserved0;
 
    GUID                    Guid;
    FILETIME                ftLastRolloverTime;
    FILETIME                ftNextRolloverTime;
    DWORD                   dwState;
    DWORD                   dwCurrentRolloverStatus;
    [string] wchar_t *      pwszActiveKey;
    [string] wchar_t *      pwszStandbyKey;
    [string] wchar_t *      pwszNextKey;
    DWORD                   dwReserved;
}
DNS_RPC_SKD_STATE, *PDNS_RPC_SKD_STATE;
 
//
// Signing Key Descriptor (SKD) Properties for a zone.
//
//  pSkd     Static properties of a Zone SKD. This is a DNS_RP_SKD structure
//
//  pSkdState     Dynamic properties of a Zone SKD. This is a DNS_RP_SKD_STATE structure
//
//  pSkdStateEx     Extended Dynamic properties of a Zone SKD. This is a DNS_RP_SKD_STATE_EX
//                  structure
 
typedef struct _DnssrvRpcZoneSKDSettings
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
    PDNS_RPC_SKD        pSkd;
    PDNS_RPC_SKD_STATE  pSkdState;
    PDNS_RPC_SKD_STATE_EX pSkdStateEx;    
    
} DNS_RPC_ZONE_SKD, *PDNS_RPC_ZONE_SKD;
 
//
//  DNSSEC Settings of a Zone
 
typedef struct _DnssrvRpcZoneDnssecSettings
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;    
    DWORD               fIsSigned;        
    DWORD               fSignWithNSEC3;
    DWORD               fNSEC3OptOut;
    DWORD               dwMaintainTrustAnchor;
    DWORD               fParentHasSecureDelegation;
    DWORD               dwDSRecordAlgorithms;
    DWORD               fRFC5011KeyRollovers;
    BYTE                bNSEC3HashAlgorithm;
    BYTE                bNSEC3RandomSaltLength;
    WORD                wNSEC3IterationCount;
    LPWSTR              pwszNSEC3UserSalt;
    DWORD               dwDNSKEYRecordSetTtl;
    DWORD               dwDSRecordSetTtl;
    DWORD               dwSignatureInceptionOffset;
    DWORD               dwSecureDelegationPollingPeriod;
    DWORD               dwPropagationTime;    
    DWORD               cbNSEC3CurrentSaltLength;
    [size_is(cbNSEC3CurrentSaltLength)]
    BYTE       *        pbNSEC3CurrentSalt[]; /* add array declarator */
    GUID                CurrentRollingSKDGuid;
    DWORD               dwBufferLength;    
    [size_is(dwBufferLength)]
    BYTE       *        pBuffer[]; /* add array declarator */
    DWORD               dwCount;    
    [size_is(dwCount)]
    PDNS_RPC_ZONE_SKD   pZoneSkdArray[] ; /* add array declarator */
} DNS_RPC_ZONE_DNSSEC_SETTINGS, *PDNS_RPC_ZONE_DNSSEC_SETTINGS;
 
typedef struct _DnssrvRpcTrustAnchor
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
    WORD                wTrustAnchorType;
    WORD                wKeyTag;
    WORD                wRRLength;
    TRUSTANCHOR_STATE   eTrustAnchorState;
    __int64             i64EnteredStateTime;
    __int64             i64NextStateTime;
    DWORD               dwReserved;
    [size_is(wRRLength)]
        BYTE            RRData[];
}
DNS_RPC_TRUST_ANCHOR, *PDNS_RPC_TRUST_ANCHOR;
 
typedef struct _DnssrvRpcTrustAnchorList
{
    DWORD                         dwRpcStructureVersion;
    DWORD                         dwReserved0;
 
    [range(0,500000)]              DWORD                   dwTrustAnchorCount;
    [size_is(dwTrustAnchorCount)]  PDNS_RPC_TRUST_ANCHOR   TrustAnchorArray[];
}
DNS_RPC_TRUST_ANCHOR_LIST, *PDNS_RPC_TRUST_ANCHOR_LIST;
 
 
//
//  Directory partition enumeration and info
//
 
#define DNS_DP_AUTOCREATED              0x00000001
#define DNS_DP_LEGACY                   0x00000002
#define DNS_DP_DOMAIN_DEFAULT           0x00000004
#define DNS_DP_FOREST_DEFAULT           0x00000008
#define DNS_DP_ENLISTED                 0x00000010
#define DNS_DP_DELETED                  0x00000020
 
#define DNS_DP_STATE_OKAY           0   // DP is up and ready for all operations
#define DNS_DP_STATE_REPL_INCOMING  1   //  DP is replicating in -> do not read or write
#define DNS_DP_STATE_REPL_OUTGOING  2   //  DP is being deleted -> do not read or write
#define DNS_DP_STATE_UNKNOWN        3   //  DP is unavailable for unknown reason
 
typedef struct _DnssrvRpcDirectoryPartitionEnum
{
    DWORD           dwRpcStructureVersion;
    DWORD           dwReserved0;
 
    [string] char * pszDpFqdn;
    DWORD           dwFlags;
    DWORD           dwZoneCount;
}
DNS_RPC_DP_ENUM, *PDNS_RPC_DP_ENUM;
 
typedef struct _DnssrvRpcDirectoryPartitionList
{
    DWORD                   dwRpcStructureVersion;
    DWORD                   dwReserved0;
    [range(0,5000)]         DWORD               dwDpCount;
    [size_is(dwDpCount)]    PDNS_RPC_DP_ENUM    DpArray[];
}
DNS_RPC_DP_LIST, *PDNS_RPC_DP_LIST;
 
typedef struct _DnssrvRpcDirectoryPartitionReplica
{
    [string]  wchar_t *     pszReplicaDn;
}
DNS_RPC_DP_REPLICA, *PDNS_RPC_DP_REPLICA;
 
typedef struct _DnssrvRpcDirectoryPartition
{
    DWORD           dwRpcStructureVersion;
    DWORD           dwReserved0;
 
    [string] char *          pszDpFqdn;
    [string] wchar_t *       pszDpDn;        
    [string] wchar_t *       pszCrDn;      
    DWORD           dwFlags;
    DWORD           dwZoneCount;
    DWORD           dwState;
 
    DWORD           dwReserved[ 3 ];
    [string]  wchar_t *         pwszReserved[ 3 ];
    [range(0,10000)]            DWORD                   dwReplicaCount;
    [size_is(dwReplicaCount)]   PDNS_RPC_DP_REPLICA     ReplicaArray[];
}
DNS_RPC_DP_INFO, *PDNS_RPC_DP_INFO;
 
//
//  Enlist (or create) directory partition
//
 
#define DNS_DP_OP_CREATE                1   //  create a new DP
#define DNS_DP_OP_DELETE                2   //  delete an existing DP
#define DNS_DP_OP_ENLIST                3   //  enlist this DC in an existing DP
#define DNS_DP_OP_UNENLIST              4   //  unenlist this DC from a DP
#define DNS_DP_OP_CREATE_DOMAIN         5   //  built-in domain DP
#define DNS_DP_OP_CREATE_FOREST         6   //  built-in forest DP
 
typedef struct _DnssrvRpcEnlistDirPart
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
    [string] char *  pszDpFqdn;      //  UTF8
    DWORD       dwOperation;
}
DNS_RPC_ENLIST_DP, *PDNS_RPC_ENLIST_DP;
 
//
//  Zone export
//
 
typedef struct _DnssrvRpcZoneExport
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
 
    [string] char *  pszZoneExportFile;
}
DNS_RPC_ZONE_EXPORT_INFO, *PDNS_RPC_ZONE_EXPORT_INFO;
 
//
//  Zone property data
//
 
typedef struct _DnssrvRpcZoneSecondariesW2K
{
    DWORD       fSecureSecondaries;
    DWORD       fNotifyLevel;
    PIP4_ARRAY  aipSecondaries;
    PIP4_ARRAY  aipNotify;
}
DNS_RPC_ZONE_SECONDARIES_W2K, *PDNS_RPC_ZONE_SECONDARIES_W2K;
 
typedef struct _DnssrvRpcZoneSecondariesDotNet
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
 
    DWORD       fSecureSecondaries;
    DWORD       fNotifyLevel;
    PIP4_ARRAY  aipSecondaries;
    PIP4_ARRAY  aipNotify;
}
DNS_RPC_ZONE_SECONDARIES_DOTNET, *PDNS_RPC_ZONE_SECONDARIES_DOTNET;
 
typedef struct _DnssrvRpcZoneSecondariesLonghorn
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
 
    DWORD               fSecureSecondaries;
    DWORD               fNotifyLevel;
    PDNS_ADDR_ARRAY     aipSecondaries;
    PDNS_ADDR_ARRAY     aipNotify;
}
DNS_RPC_ZONE_SECONDARIES_LONGHORN, *PDNS_RPC_ZONE_SECONDARIES_LONGHORN, DNS_RPC_ZONE_SECONDARIES, *PDNS_RPC_ZONE_SECONDARIES;
 
typedef struct _DnssrvRpcZoneDatabaseW2K
{
    DWORD       fDsIntegrated;
    [string] char *  pszFileName;
}
DNS_RPC_ZONE_DATABASE_W2K, *PDNS_RPC_ZONE_DATABASE_W2K;
 
typedef struct _DnssrvRpcZoneDatabaseDotNet
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
 
    DWORD       fDsIntegrated;
    [string] char *  pszFileName;
}
DNS_RPC_ZONE_DATABASE_DOTNET, *PDNS_RPC_ZONE_DATABASE_DOTNET, DNS_RPC_ZONE_DATABASE, *PDNS_RPC_ZONE_DATABASE;
 
typedef struct _DnssrvRpcZoneChangePartition
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
    [string] char *  pszDestPartition;
}
DNS_RPC_ZONE_CHANGE_DP, *PDNS_RPC_ZONE_CHANGE_DP;
 
typedef struct _DnsRpcZoneInfoW2K
{
    [string] char * pszZoneName;
    DWORD       dwZoneType;
    DWORD       fReverse;
    DWORD       fAllowUpdate;
    DWORD       fPaused;
    DWORD       fShutdown;
    DWORD       fAutoCreated;
 
    //  Database info
    DWORD       fUseDatabase;
    [string] char * pszDataFile;
 
    //  Masters
    PIP4_ARRAY  aipMasters;
 
    //  Secondaries
    DWORD       fSecureSecondaries;
    DWORD       fNotifyLevel;
    PIP4_ARRAY  aipSecondaries;
    PIP4_ARRAY  aipNotify;
 
    //  WINS or NetBIOS lookup
    DWORD       fUseWins;
    DWORD       fUseNbstat;
 
    //  Aging
    DWORD       fAging;
    DWORD       dwNoRefreshInterval;
    DWORD       dwRefreshInterval;
    DWORD       dwAvailForScavengeTime;
    PIP4_ARRAY  aipScavengeServers;
 
    //  save some space, just in case
    //  avoid versioning issues if possible
    DWORD       pvReserved1;
    DWORD       pvReserved2;
    DWORD       pvReserved3;
    DWORD       pvReserved4;
}
DNS_RPC_ZONE_INFO_W2K, *PDNS_RPC_ZONE_INFO_W2K;
 
typedef struct _DnsRpcZoneInfoDotNet
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
 
    [string] char *  pszZoneName;
    DWORD       dwZoneType;
    DWORD       fReverse;
    DWORD       fAllowUpdate;
    DWORD       fPaused;
    DWORD       fShutdown;
    DWORD       fAutoCreated;
 
    //  Database info
    DWORD       fUseDatabase;
    [string] char * pszDataFile;
 
    //  Masters
    PIP4_ARRAY  aipMasters;
 
    //  Secondaries
    DWORD       fSecureSecondaries;
    DWORD       fNotifyLevel;
    PIP4_ARRAY  aipSecondaries;
    PIP4_ARRAY  aipNotify;
 
    //  WINS or NetBIOS lookup
    DWORD       fUseWins;
    DWORD       fUseNbstat;
 
    //  Aging
    DWORD       fAging;
    DWORD       dwNoRefreshInterval;
    DWORD       dwRefreshInterval;
    DWORD       dwAvailForScavengeTime;
    PIP4_ARRAY  aipScavengeServers;
 
    //  Forwarder zones
    DWORD       dwForwarderTimeout;
    DWORD       fForwarderSlave;
 
    //  Stub zones
    PIP4_ARRAY  aipLocalMasters;
 
    //  Directory partition
    DWORD       dwDpFlags;
    [string] char *      pszDpFqdn;
    [string] wchar_t *   pwszZoneDn;
 
    //  Xfr time information
    DWORD       dwLastSuccessfulSoaCheck;
    DWORD       dwLastSuccessfulXfr;
 
    //  save some space, just in case
    DWORD       dwReserved1;
    DWORD       dwReserved2;
    DWORD       dwReserved3;
    DWORD       dwReserved4;
    DWORD       dwReserved5;
    [string] char *       pReserved1;
    [string] char *       pReserved2;
    [string] char *       pReserved3;
    [string] char *       pReserved4;
}
DNS_RPC_ZONE_INFO_DOTNET, *PDNS_RPC_ZONE_INFO_DOTNET;
 
typedef struct _DnsRpcZoneInfoLonghorn
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
 
    [string] char *               pszZoneName;
    DWORD               dwZoneType;
    DWORD               fReverse;
    DWORD               fAllowUpdate;
    DWORD               fPaused;
    DWORD               fShutdown;
    DWORD               fAutoCreated;
 
    //  Database info
    DWORD               fUseDatabase;
    [string] char *               pszDataFile;
 
    //  Masters
    PDNS_ADDR_ARRAY     aipMasters;
 
    //  Secondaries
    DWORD               fSecureSecondaries;
    DWORD               fNotifyLevel;
    PDNS_ADDR_ARRAY     aipSecondaries;
    PDNS_ADDR_ARRAY     aipNotify;
 
    //  WINS or NetBIOS lookup
    DWORD               fUseWins;
    DWORD               fUseNbstat;
 
    //  Aging
    DWORD               fAging;
    DWORD               dwNoRefreshInterval;
    DWORD               dwRefreshInterval;
    DWORD               dwAvailForScavengeTime;
    PDNS_ADDR_ARRAY     aipScavengeServers;
 
    //  Forwarder zones
    DWORD               dwForwarderTimeout;
    DWORD               fForwarderSlave;
 
    //  Stub zones
    PDNS_ADDR_ARRAY     aipLocalMasters;
 
    //  Directory partition
    DWORD               dwDpFlags;
    [string] char *               pszDpFqdn;
    [string] wchar_t *              pwszZoneDn;
 
    //  Xfr time information
    DWORD               dwLastSuccessfulSoaCheck;       
    DWORD               dwLastSuccessfulXfr;            
 
    DWORD               fQueuedForBackgroundLoad;
    DWORD               fBackgroundLoadInProgress;
    BOOL                fReadOnlyZone;
 
    //  Additional zone transfer information
    DWORD               dwLastXfrAttempt;               
    DWORD               dwLastXfrResult;                
}
DNS_RPC_ZONE_INFO_LONGHORN, *PDNS_RPC_ZONE_INFO_LONGHORN, DNS_RPC_ZONE_INFO, *PDNS_RPC_ZONE_INFO;
 
//
//  Zone create data
//
 
typedef struct _DnsRpcZoneCreateInfo
{
    [string] char *       pszZoneName;
    DWORD       dwZoneType;
    DWORD       fAllowUpdate;
    DWORD       fAging;
    DWORD       dwFlags;
 
    //  Database info
 
    [string] char *       pszDataFile;
    DWORD       fDsIntegrated;
    DWORD       fLoadExisting;
 
    //  Admin name (if auto-create SOA)
 
    [string] char *       pszAdmin;
 
    //  Masters (if secondary)
 
    PIP4_ARRAY  aipMasters;
 
    //  Secondaries
 
    PIP4_ARRAY  aipSecondaries;
    DWORD       fSecureSecondaries;
    DWORD       fNotifyLevel;
 
    //  Reserve some space to avoid versioning issues
 
    [string] char *       pvReserved1;
    [string] char *       pvReserved2;
    [string] char *       pvReserved3;
    [string] char *       pvReserved4;
    [string] char *       pvReserved5;
    [string] char *       pvReserved6;
    [string] char *       pvReserved7;
    [string] char *       pvReserved8;
 
    DWORD       dwReserved1;
    DWORD       dwReserved2;
    DWORD       dwReserved3;
    DWORD       dwReserved4;
    DWORD       dwReserved5;
    DWORD       dwReserved6;
    DWORD       dwReserved7;
    DWORD       dwReserved8;
}
DNS_RPC_ZONE_CREATE_INFO_W2K, *PDNS_RPC_ZONE_CREATE_INFO_W2K;
 
typedef struct _DnsRpcZoneCreateInfoDotNet
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
 
    [string] char *       pszZoneName;
    DWORD       dwZoneType;
    DWORD       fAllowUpdate;
    DWORD       fAging;
    DWORD       dwFlags;
 
    //  Database info
 
    [string] char *       pszDataFile;
    DWORD       fDsIntegrated;
    DWORD       fLoadExisting;
 
    //  Admin name (if auto-create SOA)
 
    [string] char *       pszAdmin;
 
    //  Masters (if secondary)
 
    PIP4_ARRAY  aipMasters;
 
    //  Secondaries
 
    PIP4_ARRAY  aipSecondaries;
    DWORD       fSecureSecondaries;
    DWORD       fNotifyLevel;
 
    //  Forwarder zones
 
    DWORD       dwTimeout;
    DWORD       fRecurseAfterForwarding;
 
    //  Directory partition
 
    DWORD       dwDpFlags;      //  specify built-in DP or
    [string] char *       pszDpFqdn;      //      UTF8 FQDN of partition
 
    DWORD       dwReserved[ 32 ];
}
DNS_RPC_ZONE_CREATE_INFO_DOTNET, *PDNS_RPC_ZONE_CREATE_INFO_DOTNET;
 
 
typedef struct _DnsRpcZoneCreateInfoLonghorn
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
 
    [string] char *               pszZoneName;
    DWORD               dwZoneType;
    DWORD               fAllowUpdate;
    DWORD               fAging;
    DWORD               dwFlags;
 
    //  Database info
 
    [string] char *               pszDataFile;
    DWORD               fDsIntegrated;
    DWORD               fLoadExisting;
 
    //  Admin name (if auto-create SOA)
 
    [string] char *               pszAdmin;
 
    //  Masters (if secondary)
 
    PDNS_ADDR_ARRAY     aipMasters;
 
    //  Secondaries
 
    PDNS_ADDR_ARRAY     aipSecondaries;
    DWORD               fSecureSecondaries;
    DWORD               fNotifyLevel;
 
    //  Forwarder zones
 
    DWORD               dwTimeout;
    DWORD               fRecurseAfterForwarding;
 
    //  Directory partition
 
    DWORD               dwDpFlags;      //  specify built-in DP or
    [string] char *               pszDpFqdn;      //      UTF8 FQDN of partition
 
    DWORD               dwReserved[ 32 ];
}
DNS_RPC_ZONE_CREATE_INFO_LONGHORN, *PDNS_RPC_ZONE_CREATE_INFO_LONGHORN, DNS_RPC_ZONE_CREATE_INFO, *PDNS_RPC_ZONE_CREATE_INFO;
 
 
 
//
//  SKD collection used to enumerate the SKDs for a zone
//
 
typedef struct _DnssrvRpcZoneSigningKeyList
{
    DWORD                   dwRpcStructureVersion;
    DWORD                   dwReserved0;
 
    [range(0,1000)]         DWORD          dwCount;
    [size_is(dwCount)]      PDNS_RPC_SKD   SkdArray[];
}
DNS_RPC_SKD_LIST, *PDNS_RPC_SKD_LIST;
 
 
 
//
//  Online signing validation output structure: this structure is an output
//  of the validation operation. If the zone signing parameters are found to
//  contain an error or a problem, this structure specifies the GUID of the SKD
//  (if any) and the specific key (if any) and the error code.
//
 
typedef struct _DnssrvRpcSigningValidationError
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
 
    GUID                guidSKD;
    [string] wchar_t *  pwszSigningKeyPointerString;
    DWORD               dwExtendedError;
    DWORD               dwReserved;
}
DNS_RPC_SIGNING_VALIDATION_ERROR, *PDNS_RPC_SIGNING_VALIDATION_ERROR;
 
 
typedef struct _DnsRpcAutoConfigureLonghorn
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
 
    DWORD               dwAutoConfigFlags;
    DWORD               dwReserved1;
    [string] char *               pszNewDomainName;
}
DNS_RPC_AUTOCONFIGURE, *PDNS_RPC_AUTOCONFIGURE;
 
//
//  EnumZones2 filter specification
//
 
typedef struct _DnsRpcEnumZonesFilter
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwReserved0;
 
    DWORD       dwFilter;                   
    [string] char *       pszPartitionFqdn;           
    [string] char *       pszQueryString;             
 
    [string] char *       pszReserved[ 6 ];
}
DNS_RPC_ENUM_ZONES_FILTER, *PDNS_RPC_ENUM_ZONES_FILTER;
 
//
//  RPC record structure
//
 
typedef struct _DnssrvRpcRecord
{
    WORD        wDataLength;
    WORD        wType;
    DWORD       dwFlags;
    DWORD       dwSerial;
    DWORD       dwTtlSeconds;
    DWORD       dwTimeStamp;
    DWORD       dwReserved;
 
    [size_is(wDataLength)]  BYTE    Buffer[];
}
DNS_RPC_RECORD, *PDNS_RPC_RECORD,
DNS_FLAT_RECORD, *PDNS_FLAT_RECORD;
 
//
//  These RPC structures have no version because they are simple
//  are they are explicitly defined by their names.
//
 
typedef struct _DnssrvRpcNameAndParam
{
    DWORD       dwParam;
    [string] char *       pszNodeName;
}
DNS_RPC_NAME_AND_PARAM, *PDNS_RPC_NAME_AND_PARAM;
 
typedef struct _DnsRpcIPValidate
{
    DWORD               dwRpcStructureVersion;
    DWORD               dwReserved0;
 
    DWORD               dwContext;
    DWORD               dwReserved1;
    [string] char *               pszContextName;
    PDNS_ADDR_ARRAY     aipValidateAddrs;
}
DNS_RPC_IP_VALIDATE, *PDNS_RPC_IP_VALIDATE;
 
//
//  String array
//
 
typedef struct _DnsRpcUtf8StringList
{
    [range(0,10000)]        DWORD       dwCount;
    [size_is(dwCount),string]      char *       pszStrings[];
}
DNS_RPC_UTF8_STRING_LIST, *PDNS_RPC_UTF8_STRING_LIST;
 
typedef struct _DnsRpcUnicodeStringList
{
    [range(0,10000)]            DWORD       dwCount;
    [size_is(dwCount),string]   wchar_t *   pwszStrings[];
}
DNS_RPC_UNICODE_STRING_LIST, *PDNS_RPC_UNICODE_STRING_LIST;
 
typedef enum
{
    Equals=1,
    NotEquals
}
DNS_RPC_CRITERIA_COMPARATOR;
 
typedef enum
{
    DNS_AND,
    DNS_OR
}
DNS_RPC_POLICY_CONDITION;
 
typedef enum
{
    DnsPolicyServerLevel,
    DnsPolicyZoneLevel,
    DnsPolicyLevelMax
}DNS_RPC_POLICY_LEVEL;
 
typedef enum
{
    DnsPolicyDeny,
    DnsPolicyAllow,
    DnsPolicyIgnore,
    DnsPolicyActionMax
}DNS_RPC_POLICY_ACTION_TYPE;
 
typedef enum
{
    DnsPolicyQueryProcessing,
    DnsPolicyZoneTransfer,
    DnsPolicyDynamicUpdate,
    DnsPolicyRecursion,
    DnsPolicyMax
} DNS_RPC_POLICY_TYPE;
 
typedef enum {
     DnsPolicyCriteriaSubnet,
     DnsPolicyCriteriaTransportProtocol,
     DnsPolicyCriteriaNetworkProtocol,
     DnsPolicyCriteriaInterface,
     DnsPolicyCriteriaFqdn,
     DnsPolicyCriteriaQtype,
     DnsPolicyCriteriaTime,
     DnsPolicyCriteriaMax
}DNS_RPC_CRITERIA_ENUM;
 
typedef struct _ClientSubnetRecord
{
    LPWSTR            pwszClientSubnetName;
    PDNS_ADDR_ARRAY   pIPAddr;
    PDNS_ADDR_ARRAY   pIPv6Addr;
 
}DNS_RPC_CLIENT_SUBNET_RECORD,*PDNS_RPC_CLIENT_SUBNET_RECORD;
 
typedef struct _DnssrvRpcPolicyActionContent
{
    LPWSTR    pwszScopeName;
    DWORD     dwWeight;
}DNS_RPC_POLICY_CONTENT, * PDNS_RPC_POLICY_CONTENT;
 
typedef struct _DnssrvRpcPolicyAction
{
    [range (0,50000)]            DWORD                         dwContentCount;
    [size_is (dwContentCount)]   PDNS_RPC_POLICY_CONTENT       pContent[];
}DNS_RPC_POLICY_CONTENT_LIST, * PDNS_RPC_POLICY_CONTENT_LIST;
 
typedef struct _CriteriaList 
{
    DNS_RPC_CRITERIA_ENUM  type;
    LPWSTR                 pCriteria;
}DNS_RPC_CRITERIA,*PDNS_RPC_CRITERIA;
 
typedef struct _DnssrvRpcPolicy
{
    LPWSTR                            pwszPolicyName;
    DNS_RPC_POLICY_LEVEL              level;
    DNS_RPC_POLICY_TYPE               appliesOn;
    DNS_RPC_POLICY_ACTION_TYPE        action;
    DNS_RPC_POLICY_CONDITION          condition;
    BOOL                              isEnabled;
    DWORD                             dwProcessingOrder;
    LPSTR                             pszZoneName;
    PDNS_RPC_POLICY_CONTENT_LIST      pContentList;
    DWORDLONG                         flags;
    [range (0,50000)]            DWORD              dwCriteriaCount;
    [size_is (dwCriteriaCount)]  PDNS_RPC_CRITERIA  pCriteriaList[];
}DNS_RPC_POLICY, *PDNS_RPC_POLICY;
 
typedef struct _DnsRpcPolicyType {
    LPWSTR                   pwszPolicyName;
    DNS_RPC_POLICY_TYPE      appliesOn;
    BOOL                     fEnabled;
    DWORD                    processingOrder;
}DNS_RPC_POLICY_NAME, * PDNS_RPC_POLICY_NAME;
 
typedef struct _DnsRpcEnumPolicyList
{
    [range(0,50000)]          DWORD                    dwPolicyCount;
    [size_is(dwPolicyCount)]  PDNS_RPC_POLICY_NAME     pPolicyArray[];
} DNS_RPC_ENUMERATE_POLICY_LIST, * PDNS_RPC_ENUMERATE_POLICY_LIST;
 
//
// RRL structures
//
 
 
typedef enum {
    DnsRRLLogOnly,
    DnsRRLEnabled,
    DnsRRLDisabled
} DNS_RRL_MODE_ENUM;
 
 
typedef struct _DnsRRLParams_ {
    DWORD                     dwResponsesPerSecond;
    DWORD                     dwErrorsPerSecond;
    DWORD                     dwLeakRate;
    DWORD                     dwTCRate;
    DWORD                     dwTotalResponsesInWindow;
    DWORD                     dwWindowSize;
    DWORD                     dwIPv4PrefixLength;
    DWORD                     dwIPv6PrefixLength;
    DNS_RRL_MODE_ENUM         eMode;    
    DWORD                     dwFlags;
    BOOL                      fSetDefault;    
} DNS_RPC_RRL_PARAMS, *PDNS_RPC_RRL_PARAMS;
//
   //  Basic virtualization instance data
   //
   
   typedef struct _DnssrvRpcVirtualizationInstance
   {
       DWORD                   dwRpcStructureVersion;
       DWORD                   dwReserved;
       DWORD                   dwFlags;
       LPWSTR                  pwszVirtualizationID;
       LPWSTR                  pwszFriendlyName;
       LPWSTR                  pwszDescription;
   }
   DNS_RPC_VIRTUALIZATION_INSTANCE, *PDNS_RPC_VIRTUALIZATION_INSTANCE;
   
   //
   //  Virtualization instance enumeration
   //
   
   typedef struct _DnssrvRpcVirtualizationInstanceInfo
   {
       LPWSTR                  pwszVirtualizationID;
       LPWSTR                  pwszFriendlyName;
       LPWSTR                  pwszDescription;
   }
   DNS_RPC_VIRTUALIZATION_INSTANCE_INFO, *PDNS_RPC_VIRTUALIZATION_INSTANCE_INFO;
   
   typedef struct _DnsRpcEnumVirtualizationInstanceList
   {
       DWORD       dwRpcStructureVersion;
       DWORD       dwVirtualizationInstanceCount;
       [size_is(dwVirtualizationInstanceCount)]
       PDNS_RPC_VIRTUALIZATION_INSTANCE_INFO VirtualizationInstanceArray[];
   }
DNS_RPC_ENUM_VIRTUALIZATION_INSTANCE_LIST, *PDNS_RPC_ENUM_VIRTUALIZATION_INSTANCE_LIST;
 
//
//  Union of RPC types
//
 
typedef enum _DnssrvRpcTypeId
{
    DNSSRV_TYPEID_ANY = (-1),
    DNSSRV_TYPEID_NULL = 0,
    DNSSRV_TYPEID_DWORD,
    DNSSRV_TYPEID_LPSTR,
    DNSSRV_TYPEID_LPWSTR,
    DNSSRV_TYPEID_IPARRAY,
    DNSSRV_TYPEID_BUFFER,                       //  5
    DNSSRV_TYPEID_SERVER_INFO_W2K,
    DNSSRV_TYPEID_STATS,
    DNSSRV_TYPEID_FORWARDERS_W2K,
    DNSSRV_TYPEID_ZONE_W2K,
    DNSSRV_TYPEID_ZONE_INFO_W2K,                //  10
    DNSSRV_TYPEID_ZONE_SECONDARIES_W2K,
    DNSSRV_TYPEID_ZONE_DATABASE_W2K,
    DNSSRV_TYPEID_ZONE_TYPE_RESET_W2K,
    DNSSRV_TYPEID_ZONE_CREATE_W2K,
    DNSSRV_TYPEID_NAME_AND_PARAM,               //  15
    DNSSRV_TYPEID_ZONE_LIST_W2K,
    DNSSRV_TYPEID_ZONE_RENAME,
    DNSSRV_TYPEID_ZONE_EXPORT,
    DNSSRV_TYPEID_SERVER_INFO_DOTNET,
    DNSSRV_TYPEID_FORWARDERS_DOTNET,            //  20
    DNSSRV_TYPEID_ZONE,
    DNSSRV_TYPEID_ZONE_INFO_DOTNET,
    DNSSRV_TYPEID_ZONE_SECONDARIES_DOTNET,
    DNSSRV_TYPEID_ZONE_DATABASE,
    DNSSRV_TYPEID_ZONE_TYPE_RESET_DOTNET,       //  25
    DNSSRV_TYPEID_ZONE_CREATE_DOTNET,
    DNSSRV_TYPEID_ZONE_LIST,
    DNSSRV_TYPEID_DP_ENUM,
    DNSSRV_TYPEID_DP_INFO,
    DNSSRV_TYPEID_DP_LIST,                      //  30
    DNSSRV_TYPEID_ENLIST_DP,
    DNSSRV_TYPEID_ZONE_CHANGE_DP,
    DNSSRV_TYPEID_ENUM_ZONES_FILTER,
    DNSSRV_TYPEID_ADDRARRAY,
    DNSSRV_TYPEID_SERVER_INFO,                  //  35
    DNSSRV_TYPEID_ZONE_INFO,
    DNSSRV_TYPEID_FORWARDERS,
    DNSSRV_TYPEID_ZONE_SECONDARIES,
    DNSSRV_TYPEID_ZONE_TYPE_RESET,
    DNSSRV_TYPEID_ZONE_CREATE,                  //  40
    DNSSRV_TYPEID_IP_VALIDATE,
    DNSSRV_TYPEID_AUTOCONFIGURE,
    DNSSRV_TYPEID_UTF8_STRING_LIST,
    DNSSRV_TYPEID_UNICODE_STRING_LIST,
    DNSSRV_TYPEID_SKD,                          //  45
    DNSSRV_TYPEID_SKD_LIST,
    DNSSRV_TYPEID_SKD_STATE,
    DNSSRV_TYPEID_SIGNING_VALIDATION_ERROR,
    DNSSRV_TYPEID_TRUST_POINT_LIST,
    DNSSRV_TYPEID_TRUST_ANCHOR_LIST,            //  50
    DNSSRV_TYPEID_ZONE_SIGNING_SETTINGS,        
    DNSSRV_TYPEID_ZONE_SCOPE_ENUM,
    DNSSRV_TYPEID_ZONE_STATS,
    DNSSRV_TYPEID_ZONE_SCOPE_CREATE,
    DNSSRV_TYPEID_ZONE_SCOPE_INFO,               //  55
    DNSSRV_TYPEID_SCOPE_ENUM, 
    DNSSRV_TYPEID_CLIENT_SUBNET_RECORD,
    DNSSRV_TYPEID_POLICY,
    DNSSRV_TYPEID_POLICY_NAME,
    DNSSRV_TYPEID_POLICY_ENUM,                   //  60
    DNSSRV_TYPEID_RRL,
    DNSSRV_TYPEID_VIRTUALIZATION_INSTANCE,
    DNSSRV_TYPEID_VIRTUALIZATION_INSTANCE_ENUM
}
DNS_RPC_TYPEID, *PDNS_RPC_TYPEID;
 
#define DNS_RPC_ZONE_STATS_VER           1
#define DNS_RPC_ZONE_STATS               DNS_RPC_ZONE_STATS_V1
#define PDNS_RPC_ZONE_STATS              PDNS_RPC_ZONE_STATS_V1
 
#define DNS_RPC_ZONE_SCOPE_CREATE_INFO_VER    1
#define DNS_RPC_ZONE_SCOPE_CREATE_INFO        DNS_RPC_ZONE_SCOPE_CREATE_INFO_V1
#define PDNS_RPC_ZONE_SCOPE_CREATE_INFO       PDNS_RPC_ZONE_SCOPE_CREATE_INFO_V1
 
#define DNS_RPC_ZONE_SCOPE_INFO_VER      1
#define DNS_RPC_ZONE_SCOPE_INFO          DNS_RPC_ZONE_SCOPE_INFO_V1
#define PDNS_RPC_ZONE_SCOPE_INFO         PDNS_RPC_ZONE_SCOPE_INFO_V1
 
#define DNS_RPC_ENUM_ZONE_SCOPE_LIST_VER    1
 
typedef struct _DnsRpcEnumZoneScopeList
{
    DWORD       dwRpcStructureVersion;
 
    DWORD       dwZoneScopeCount;
    //  array of dwZoneScopeCount zones
    [size_is(dwZoneScopeCount)]
    LPWSTR      ZoneScopeArray[];     
 
} DNS_RPC_ENUM_ZONE_SCOPE_LIST, * PDNS_RPC_ENUM_ZONE_SCOPE_LIST;
 
//
//  DNS server statistics
//
 
typedef struct  _DnsSystemTime
{
    WORD    wYear;
    WORD    wMonth;
    WORD    wDayOfWeek;
    WORD    wDay;
    WORD    wHour;
    WORD    wMinute;
    WORD    wSecond;
    WORD    wMilliseconds;
}
DNS_SYSTEMTIME;
 
//
//  Zone time statisticsinfo.
//
typedef struct _DnsZoneTimeStats
{
    DNS_SYSTEMTIME  StatsCollectionStartTime;
}
DNSSRV_ZONE_TIME_STATS, *PDNSSRV_ZONE_TIME_STATS;
 
#define MAX_RECORD_TYPES                  32
#define MAX_ZONE_TRANSFER_TYPES           2
 
//
// Enum for all zone statistics types 
//
typedef enum _DNS_ZONE_STATS_TYPE {
    //
    // Record types. If new zone stats record type is added/deleted
    // then update MAX_RECORD_TYPES accordingly.
    //
    ZONE_STATS_TYPE_RECORD_A = 0,
    ZONE_STATS_TYPE_RECORD_AAAA,
    ZONE_STATS_TYPE_RECORD_PTR,
    ZONE_STATS_TYPE_RECORD_CNAME,
    ZONE_STATS_TYPE_RECORD_MX,
    ZONE_STATS_TYPE_RECORD_AFSDB,
    ZONE_STATS_TYPE_RECORD_ATMA,
    ZONE_STATS_TYPE_RECORD_DHCID,
    ZONE_STATS_TYPE_RECORD_DNAME,
    ZONE_STATS_TYPE_RECORD_HINFO,
    ZONE_STATS_TYPE_RECORD_ISDN,
    ZONE_STATS_TYPE_RECORD_MG,
    ZONE_STATS_TYPE_RECORD_MB,
    ZONE_STATS_TYPE_RECORD_MINFO,
    ZONE_STATS_TYPE_RECORD_NAPTR,
    ZONE_STATS_TYPE_RECORD_NXT,
    ZONE_STATS_TYPE_RECORD_KEY,
    ZONE_STATS_TYPE_RECORD_MR,
    ZONE_STATS_TYPE_RECORD_RP,
    ZONE_STATS_TYPE_RECORD_RT,
    ZONE_STATS_TYPE_RECORD_SRV,
    ZONE_STATS_TYPE_RECORD_SIG,
    ZONE_STATS_TYPE_RECORD_TEXT,
    ZONE_STATS_TYPE_RECORD_WKS,
    ZONE_STATS_TYPE_RECORD_X25,
    ZONE_STATS_TYPE_RECORD_DNSKEY,
    ZONE_STATS_TYPE_RECORD_DS,
    ZONE_STATS_TYPE_RECORD_NS,
    ZONE_STATS_TYPE_RECORD_SOA,
    ZONE_STATS_TYPE_RECORD_TLSA,
    ZONE_STATS_TYPE_RECORD_ALL,
    ZONE_STATS_TYPE_RECORD_OTHERS,
 
    //
    // Zone transfer types. If new zone transfer type is added/deleted
    // then update MAX_ZONE_TRANSFER_TYPES accordingly.
    //
    ZONE_STATS_TYPE_TRANSFER_AXFR,
    ZONE_STATS_TYPE_TRANSFER_IXFR,
 
    //
    // Zone update.
    //
    ZONE_STATS_TYPE_UPDATE,
 
    //
    // Zone RRL Stats
    //
    ZONE_STATS_TYPE_RRL,
 
    MAX_ZONE_STATS_TYPES
} DNS_ZONE_STATS_TYPE, *PDNS_DONE_STATS_TYPE;
 
//
// Per zone per record type statistics.
//
typedef struct _DnsZoneQueryStats {
    DNS_ZONE_STATS_TYPE RecordType;
    ULONG64 QueriesResponded;
    ULONG64 QueriesReceived;
    ULONG64 QueriesFailure;
    ULONG64 QueriesNameError;
}
DNSSRV_ZONE_QUERY_STATS, *PDNSSRV_ZONE_QUERY_STATS;
 
typedef struct _DnsRRLStats
{
    DNSSRV_STAT_HEADER  Header;
 
    DWORD   TotalResponsesSent;
    DWORD   TotalResponsesDropped;
    DWORD   TotalResponsesTruncated;
    DWORD   TotalResponsesLeaked;
}
DNSSRV_RRL_STATS, *PDNSSRV_RRL_STATS;
 
//
// Zone transfer statistics.
//
typedef struct _DnsZoneTransferStats {
    DNS_ZONE_STATS_TYPE TransferType;
    ULONG64 RequestReceived;
    ULONG64 RequestSent;
    ULONG64 ResponseReceived;
    ULONG64 SuccessReceived;
    ULONG64 SuccessSent;
}
DNSSRV_ZONE_TRANSFER_STATS, *PDNSSRV_ZONE_TRANSFER_STATS;
 
//
// Zone update statistics.
//
typedef struct _DnsZoneUpdateStats {
    DNS_ZONE_STATS_TYPE Type;
    ULONG64 DynamicUpdateReceived;
    ULONG64 DynamicUpdateRejected;
}
DNSSRV_ZONE_UPDATE_STATS, *PDNSSRV_ZONE_UPDATE_STATS;
 
 
//
// Zone RRL statistics.
//
typedef struct _DnsZoneRRLStats {
 
    DNS_ZONE_STATS_TYPE Type;
    DWORD   TotalResponsesSent;
    DWORD   TotalResponsesDropped;
    DWORD   TotalResponsesTruncated;
    DWORD   TotalResponsesLeaked;
}
DNSSRV_ZONE_RRL_STATS, *PDNSSRV_ZONE_RRL_STATS;
 
typedef struct _DnsRpcZoneStats {
    DWORD   dwRpcStructureVersion;
    DNSSRV_ZONE_TIME_STATS ZoneTimeStats;
    DNSSRV_ZONE_QUERY_STATS ZoneQueryStats[MAX_RECORD_TYPES];
    DNSSRV_ZONE_TRANSFER_STATS ZoneTransferStats[MAX_ZONE_TRANSFER_TYPES];
    DNSSRV_ZONE_UPDATE_STATS ZoneUpdateStats;
    DNSSRV_ZONE_RRL_STATS ZoneRRLStats;
}DNS_RPC_ZONE_STATS_V1, *PDNS_RPC_ZONE_STATS_V1;
 
typedef struct _DnsRpcScopeCreate
{
    DWORD       dwFlags ;  
    LPWSTR      pwszScopeName;  // Scope name that is to be created
}DNS_RPC_ZONE_SCOPE_CREATE_INFO_V1,*PDNS_RPC_ZONE_SCOPE_CREATE_INFO_V1;
 
typedef struct _DnsRpcZoneScopeInfo
{
    DWORD       dwRpcStructureVersion;
    LPWSTR      pwszScopeName;
    LPWSTR      pwszDataFile;
} DNS_RPC_ZONE_SCOPE_INFO_V1, *PDNS_RPC_ZONE_SCOPE_INFO_V1;
 
typedef struct _DnsRpcEnumScopeList
{
    DWORD       dwRpcStructureVersion;
    DWORD       dwScopeCount;
    [size_is(dwScopeCount)]
    LPWSTR      ScopeArray[];
} DNS_RPC_ENUM_SCOPE_LIST,  *PDNS_RPC_ENUM_SCOPE_LIST;
 
typedef [switch_type(DWORD)] union _DnssrvSrvRpcUnion
{
    [case(DNSSRV_TYPEID_NULL)]      PBYTE       Null;
 
    [case(DNSSRV_TYPEID_DWORD)]     DWORD       Dword;
 
    [case(DNSSRV_TYPEID_LPSTR)]     [string] char *     String;
 
    [case(DNSSRV_TYPEID_LPWSTR)]    [string] wchar_t *  WideString;
 
    [case(DNSSRV_TYPEID_IPARRAY)]   PIP4_ARRAY  IpArray;
 
    [case(DNSSRV_TYPEID_BUFFER)]
        PDNS_RPC_BUFFER                         Buffer;
 
    [case(DNSSRV_TYPEID_SERVER_INFO_W2K)]
        PDNS_RPC_SERVER_INFO_W2K                ServerInfoW2K;
 
    [case(DNSSRV_TYPEID_STATS)]
        PDNSSRV_STATS                           Stats;
 
    [case(DNSSRV_TYPEID_FORWARDERS_W2K)]
        PDNS_RPC_FORWARDERS_W2K                 ForwardersW2K;
 
    [case(DNSSRV_TYPEID_ZONE_W2K)]
        PDNS_RPC_ZONE_W2K                       ZoneW2K;
 
    [case(DNSSRV_TYPEID_ZONE_INFO_W2K)]
        PDNS_RPC_ZONE_INFO_W2K                  ZoneInfoW2K;
 
    [case(DNSSRV_TYPEID_ZONE_SECONDARIES_W2K)]
        PDNS_RPC_ZONE_SECONDARIES_W2K           SecondariesW2K;
 
    [case(DNSSRV_TYPEID_ZONE_DATABASE_W2K)]
        PDNS_RPC_ZONE_DATABASE_W2K              DatabaseW2K;
 
    [case(DNSSRV_TYPEID_ZONE_CREATE_W2K)]
        PDNS_RPC_ZONE_CREATE_INFO_W2K           ZoneCreateW2K;
 
    [case(DNSSRV_TYPEID_NAME_AND_PARAM)]
        PDNS_RPC_NAME_AND_PARAM                 NameAndParam;
 
    [case(DNSSRV_TYPEID_ZONE_LIST_W2K)]
        PDNS_RPC_ZONE_LIST_W2K                  ZoneListW2K;
 
    [case(DNSSRV_TYPEID_SERVER_INFO_DOTNET)]
        PDNS_RPC_SERVER_INFO_DOTNET             ServerInfoDotNet;
 
    [case(DNSSRV_TYPEID_FORWARDERS_DOTNET)]
        PDNS_RPC_FORWARDERS_DOTNET              ForwardersDotNet;
 
    [case(DNSSRV_TYPEID_ZONE)]
        PDNS_RPC_ZONE                           Zone;
 
    [case(DNSSRV_TYPEID_ZONE_INFO_DOTNET)]
        PDNS_RPC_ZONE_INFO_DOTNET               ZoneInfoDotNet;
    [case(DNSSRV_TYPEID_ZONE_SECONDARIES_DOTNET)]
        PDNS_RPC_ZONE_SECONDARIES_DOTNET        SecondariesDotNet;
 
    [case(DNSSRV_TYPEID_ZONE_DATABASE)]
        PDNS_RPC_ZONE_DATABASE                  Database;
 
    [case(DNSSRV_TYPEID_ZONE_CREATE_DOTNET)]
        PDNS_RPC_ZONE_CREATE_INFO_DOTNET        ZoneCreateDotNet;
 
    [case(DNSSRV_TYPEID_ZONE_LIST)]
        PDNS_RPC_ZONE_LIST                      ZoneList;
 
    [case(DNSSRV_TYPEID_ZONE_EXPORT)]
        PDNS_RPC_ZONE_EXPORT_INFO               ZoneExport;
 
    [case(DNSSRV_TYPEID_DP_INFO)]
        PDNS_RPC_DP_INFO                        DirectoryPartition;
 
    [case(DNSSRV_TYPEID_DP_ENUM)]
        PDNS_RPC_DP_ENUM                        DirectoryPartitionEnum;
 
    [case(DNSSRV_TYPEID_DP_LIST)]
        PDNS_RPC_DP_LIST                        DirectoryPartitionList;
 
    [case(DNSSRV_TYPEID_ENLIST_DP)]
        PDNS_RPC_ENLIST_DP                      EnlistDirectoryPartition;
 
    [case(DNSSRV_TYPEID_ZONE_CHANGE_DP)]
        PDNS_RPC_ZONE_CHANGE_DP             ZoneChangeDirectoryPartition;
 
    [case(DNSSRV_TYPEID_ENUM_ZONES_FILTER)]
        PDNS_RPC_ENUM_ZONES_FILTER              EnumZonesFilter;
 
    [case(DNSSRV_TYPEID_ADDRARRAY)]
        PDNS_ADDR_ARRAY                         AddrArray;
 
    [case(DNSSRV_TYPEID_SERVER_INFO)]
        PDNS_RPC_SERVER_INFO                    ServerInfo;
 
    [case(DNSSRV_TYPEID_ZONE_CREATE)]
        PDNS_RPC_ZONE_CREATE_INFO               ZoneCreate;
 
    [case(DNSSRV_TYPEID_FORWARDERS)]
        PDNS_RPC_FORWARDERS                     Forwarders;
 
    [case(DNSSRV_TYPEID_ZONE_SECONDARIES)]
        PDNS_RPC_ZONE_SECONDARIES               Secondaries;
 
    [case(DNSSRV_TYPEID_IP_VALIDATE)]
        PDNS_RPC_IP_VALIDATE                    IpValidate;
 
    [case(DNSSRV_TYPEID_ZONE_INFO)]
        PDNS_RPC_ZONE_INFO                      ZoneInfo;
 
    [case(DNSSRV_TYPEID_AUTOCONFIGURE)]
        PDNS_RPC_AUTOCONFIGURE                  AutoConfigure;
 
    [case(DNSSRV_TYPEID_UTF8_STRING_LIST)]
        PDNS_RPC_UTF8_STRING_LIST               Utf8StringList;
 
    [case(DNSSRV_TYPEID_UNICODE_STRING_LIST)]
        PDNS_RPC_UNICODE_STRING_LIST            UnicodeStringList;
 
    [case(DNSSRV_TYPEID_SKD)]
        PDNS_RPC_SKD                            Skd;
 
    [case(DNSSRV_TYPEID_SKD_LIST)]
        PDNS_RPC_SKD_LIST                       SkdList;
 
    [case(DNSSRV_TYPEID_SKD_STATE)]
        PDNS_RPC_SKD_STATE                      SkdState;
 
    [case(DNSSRV_TYPEID_SIGNING_VALIDATION_ERROR)]
        PDNS_RPC_SIGNING_VALIDATION_ERROR       SigningValidationError;
 
    [case(DNSSRV_TYPEID_TRUST_POINT_LIST)]
        PDNS_RPC_TRUST_POINT_LIST               TrustPointList;
 
    [case(DNSSRV_TYPEID_TRUST_ANCHOR_LIST)]
        PDNS_RPC_TRUST_ANCHOR_LIST              TrustAnchorList;
 
    [case(DNSSRV_TYPEID_ZONE_SIGNING_SETTINGS)]
        PDNS_RPC_ZONE_DNSSEC_SETTINGS           ZoneDnsSecSettings;        
 
     [case(DNSSRV_TYPEID_ZONE_SCOPE_ENUM)]
        PDNS_RPC_ENUM_ZONE_SCOPE_LIST           ZoneScopeList;          
 
    [case(DNSSRV_TYPEID_ZONE_STATS)]
        PDNS_RPC_ZONE_STATS                     ZoneStats;
 
    [case(DNSSRV_TYPEID_ZONE_SCOPE_CREATE)]
        PDNS_RPC_ZONE_SCOPE_CREATE_INFO         ScopeCreate;
 
    [case(DNSSRV_TYPEID_ZONE_SCOPE_INFO)]
        PDNS_RPC_ZONE_SCOPE_INFO                ScopeInfo;
 
    [case(DNSSRV_TYPEID_SCOPE_ENUM)]
        PDNS_RPC_ENUM_SCOPE_LIST                ScopeList;
 
    [case(DNSSRV_TYPEID_CLIENT_SUBNET_RECORD)]
        PDNS_RPC_CLIENT_SUBNET_RECORD           SubnetList;
 
    [case(DNSSRV_TYPEID_POLICY)]
        PDNS_RPC_POLICY                         pPolicy;
 
    [case(DNSSRV_TYPEID_POLICY_NAME)]
        PDNS_RPC_POLICY_NAME                    pPolicyName;
 
    [case(DNSSRV_TYPEID_POLICY_ENUM)]
        PDNS_RPC_ENUMERATE_POLICY_LIST          pPolicyList;
 
    [case(DNSSRV_TYPEID_RRL)]
        PDNS_RPC_RRL_PARAMS                     pRRLParams;
 
    [case(DNSSRV_TYPEID_VIRTUALIZATION_INSTANCE)]
        PDNS_RPC_VIRTUALIZATION_INSTANCE      VirtualizationInstance;
 
    [case(DNSSRV_TYPEID_VIRTUALIZATION_INSTANCE_ENUM)]
        PDNS_RPC_ENUM_VIRTUALIZATION_INSTANCE_LIST VirtualizationInstanceList;
 
 
} DNSSRV_RPC_UNION;
 
typedef enum _ImportOperationResult
{
    // No change was detected in Signing Settings imported and that of the Zone
    IMPORT_STATUS_NOOP,
 
    // Zone is marked for Re-Sign
    IMPORT_STATUS_SIGNING_READY,
 
    // Zone is marked for Unsign
    IMPORT_STATUS_UNSIGNING_READY,
 
    // Change was detected but no re-signing\unsigning required  
    IMPORT_STATUS_CHANGED
 
} ImportOpResult;
 
 
[
    uuid(50abc2a4-574d-40b3-9d66-ee4fd5fba076),
    version(5.0),
    pointer_default(unique)
]
interface   DnsServer
{
 
LONG
R_DnssrvOperation(
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in]                                DWORD               dwContext,
    [in, unique, string]                LPCSTR              pszOperation,
    [in]                                DWORD               dwTypeId,
    [in, switch_is(dwTypeId)]           DNSSRV_RPC_UNION    pData
    );
 
LONG
R_DnssrvQuery(
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in, unique, string]                LPCSTR              pszOperation,
    [out]                               PDWORD              pdwTypeId,
    [out, switch_is(*pdwTypeId)]        DNSSRV_RPC_UNION *  ppData
    );
 
LONG
R_DnssrvComplexOperation(
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in, unique, string]                LPCSTR              pszOperation,
    [in]                                DWORD               dwTypeIn,
    [in, switch_is(dwTypeIn)]           DNSSRV_RPC_UNION    pDataIn,
    [out]                               PDWORD              pdwTypeOut,
    [out, switch_is(*pdwTypeOut)]       DNSSRV_RPC_UNION *  ppDataOut
    );
 
LONG
R_DnssrvEnumRecords(
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in, unique, string]                LPCSTR              pszNodeName,
    [in, unique, string]                LPCSTR              pszStartChild,
    [in]                                WORD                wRecordType,
    [in]                                DWORD               fSelectFlag,
    [in, unique, string]                LPCSTR              pszFilterStart,
    [in, unique, string]                LPCSTR              pszFilterStop,
    [out]                               PDWORD              pdwBufferLength,
    [out, size_is(, *pdwBufferLength)]  PBYTE *             ppBuffer
    );
 
LONG
R_DnssrvUpdateRecord(
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in, string]                        LPCSTR              pszNodeName,
    [in, unique]                        PDNS_RPC_RECORD     pAddRecord,
    [in, unique]                        PDNS_RPC_RECORD     pDeleteRecord
    );
 
LONG
R_DnssrvOperation2(
    [in]                                handle_t            hBindingHandle,
    [in]                                DWORD               dwClientVersion,
    [in]                                DWORD               dwSettingFlags,
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in]                                DWORD               dwContext,
    [in, unique, string]                LPCSTR              pszOperation,
    [in]                                DWORD               dwTypeId,
    [in, switch_is(dwTypeId)]           DNSSRV_RPC_UNION    pData
    );
 
LONG
R_DnssrvQuery2(
    [in]                                DWORD               dwClientVersion,
    [in]                                DWORD               dwSettingFlags,
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in, unique, string]                LPCSTR              pszOperation,
    [out]                               PDWORD              pdwTypeId,
    [out, switch_is(*pdwTypeId)]        DNSSRV_RPC_UNION *  ppData
    );
 
LONG
R_DnssrvComplexOperation2(
    [in]                                DWORD               dwClientVersion,
    [in]                                DWORD               dwSettingFlags,
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in, unique, string]                LPCSTR              pszOperation,
    [in]                                DWORD               dwTypeIn,
    [in, switch_is(dwTypeIn)]           DNSSRV_RPC_UNION    pDataIn,
    [out]                               PDWORD              pdwTypeOut,
    [out, switch_is(*pdwTypeOut)]       DNSSRV_RPC_UNION *  ppDataOut
    );
 
LONG
R_DnssrvEnumRecords2(
    [in]                                DWORD               dwClientVersion,
    [in]                                DWORD               dwSettingFlags,
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in, unique, string]                LPCSTR              pszNodeName,
    [in, unique, string]                LPCSTR              pszStartChild,
    [in]                                WORD                wRecordType,
    [in]                                DWORD               fSelectFlag,
    [in, unique, string]                LPCSTR              pszFilterStart,
    [in, unique, string]                LPCSTR              pszFilterStop,
    [out]                               PDWORD              pdwBufferLength,
    [out, size_is(, *pdwBufferLength)]  PBYTE *             ppBuffer
    );
 
LONG
R_DnssrvUpdateRecord2(
    [in]                                DWORD               dwClientVersion,
    [in]                                DWORD               dwSettingFlags,
    [in, unique, string]                LPCWSTR             pwszServerName,
    [in, unique, string]                LPCSTR              pszZone,
    [in, string]                        LPCSTR              pszNodeName,
    [in, unique]                        PDNS_RPC_RECORD     pAddRecord,
    [in, unique]                        PDNS_RPC_RECORD     pDeleteRecord
    );
 
LONG
R_DnssrvUpdateRecord3(
    [in]                                handle_t                hBindingHandle,
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCWSTR                 pwszZoneScope,
    [in, string]                        LPCSTR                  pszNodeName,
    [in, unique]                        PDNS_RPC_RECORD         pAddRecord,
    [in, unique]                        PDNS_RPC_RECORD         pDeleteRecord
    );
    
LONG
R_DnssrvEnumRecords3(
    [in]                                handle_t                hBindingHandle,
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCWSTR                 pwszZoneScope,
    [in, unique, string]                LPCSTR                  pszNodeName,
    [in, unique, string]                LPCSTR                  pszStartChild,
    [in]                                WORD                    wRecordType,
    [in]                                DWORD                   fSelectFlag,
    [in, unique, string]                LPCSTR                  pszFilterStart,
    [in, unique, string]                LPCSTR                  pszFilterStop,
    [out]                               PDWORD                  pdwBufferLength,
    [out, size_is(, *pdwBufferLength)]  PBYTE *                 ppBuffer
    );    
 
LONG 
R_DnssrvOperation3(
    [in]                                handle_t                hBindingHandle,
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCWSTR                 pwszZoneScopeName,
    [in]                                DWORD                   dwContext,
    [in, unique, string]                LPCSTR                  pszOperation,
    [in]                                DWORD                   dwTypeId,
    [in, switch_is(dwTypeId)]           DNSSRV_RPC_UNION        pData
    );
    
LONG
R_DnssrvQuery3(
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCWSTR                 pszZoneScopeName,      
    [in, unique, string]                LPCSTR                  pszOperation,
    [out]                               PDWORD                  pdwTypeId,
    [out, switch_is(*pdwTypeId)]        DNSSRV_RPC_UNION *      ppData
    );
 
LONG
R_DnssrvComplexOperation3(
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCWSTR                 pwszVirtualizationInstanceID,
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCSTR                  pszOperation,
    [in]                                DWORD                   dwTypeIn,
    [in, switch_is(dwTypeIn)]           DNSSRV_RPC_UNION        pDataIn,
    [out]                               PDWORD                  pdwTypeOut,
    [out, switch_is(*pdwTypeOut)]       DNSSRV_RPC_UNION *      ppDataOut
    );
 
LONG 
R_DnssrvOperation4(
    [in]                                handle_t                hBindingHandle,
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCWSTR                 pwszVirtualizationInstanceID,
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCWSTR                 pwszZoneScopeName,
    [in]                                DWORD                   dwContext,
    [in, unique, string]                LPCSTR                  pszOperation,
    [in]                                DWORD                   dwTypeId,
    [in, switch_is(dwTypeId)]           DNSSRV_RPC_UNION        pData
    );
 
LONG 
R_DnssrvQuery4(
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCWSTR                 pwszVirtualizationInstanceID,
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCWSTR                 pszZoneScopeName,     
    [in, unique, string]                LPCSTR                  pszOperation,
    [out]                               PDWORD                  pdwTypeId,
    [out, switch_is(*pdwTypeId)]        DNSSRV_RPC_UNION *      ppData
    );
 
LONG 
R_DnssrvUpdateRecord4(
    [in]                                handle_t                hBindingHandle,
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCWSTR                 pwszVirtualizationInstanceID,    
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCWSTR                 pwszZoneScope,
    [in, string]                        LPCSTR                  pszNodeName,
    [in, unique]                        PDNS_RPC_RECORD         pAddRecord,
    [in, unique]                        PDNS_RPC_RECORD         pDeleteRecord
    );
    
LONG
R_DnssrvEnumRecords4(
    [in]                                handle_t                hBindingHandle,
    [in]                                DWORD                   dwClientVersion,
    [in]                                DWORD                   dwSettingFlags,
    [in, unique, string]                LPCWSTR                 pwszServerName,
    [in, unique, string]                LPCWSTR                 pwszVirtualizationInstanceID,
    [in, unique, string]                LPCSTR                  pszZone,
    [in, unique, string]                LPCWSTR                 pwszZoneScope,
    [in, unique, string]                LPCSTR                  pszNodeName,
    [in, unique, string]                LPCSTR                  pszStartChild,
    [in]                                WORD                    wRecordType,
    [in]                                DWORD                   fSelectFlag,
    [in, unique, string]                LPCSTR                  pszFilterStart,
    [in, unique, string]                LPCSTR                  pszFilterStop,
    [out]                               PDWORD                  pdwBufferLength,
    [out, size_is(, *pdwBufferLength)]  PBYTE *                 ppBuffer
    );      
}
