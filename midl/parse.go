// Code generated by goyacc -v midl/y.out -o midl/parse.go -p RPC midl/parse.y. DO NOT EDIT.

//line midl/parse.y:2
package midl

import __yyfmt__ "fmt"

//line midl/parse.y:2

// parse.go contains the go-yacc definitions for the
// (M)IDL grammar parser.

import (
	"fmt"
	"math/big"

	"github.com/oiweiwei/go-msrpc/midl/uuid"
)

var (
	_ = fmt.Sprintf("")
)

//line midl/parse.y:20
type RPCSymType struct {
	yys                   int
	File                  File
	Interface             Interface
	InterfaceBody         InterfaceBody
	Version               *Version
	Export                []*Export
	Type                  *Type
	Kind                  Kind
	Const                 *Const
	Operation             *Operation
	Operations            []*Operation
	Param                 *Param
	Params                []*Param
	Fields                []*Field
	Field                 *Field
	Declarators           []*pDeclarator
	Declarator            *pDeclarator
	ArrayBound            ArrayBound
	Int64                 int64
	UnionSwitch           *UnionSwitch
	UnionCases            []*UnionCase
	UnionCase             *UnionCase
	Expr                  Expr
	Exprs                 Exprs
	Ident                 string
	Char                  rune
	String                string
	Int                   *big.Int
	UUID                  *uuid.UUID
	Range                 *Range
	Strings               []string
	Token                 int
	Typedef               *pTypedef
	Attr                  pAttr
	AttrType              pAttrType
	TagID                 pTagID
	TagIDs                []pTagID
	ComClass              ComClass
	Library               Library
	ComInterfaces         []*ComInterface
	ComInterface          *ComInterface
	DispatchInterface     DispatchInterface
	DispatchInterfaceBody DispatchInterfaceBody
}

const FLOAT = 57346
const DOUBLE = 57347
const HYPER = 57348
const UNSIGNED = 57349
const SIGNED = 57350
const LONG = 57351
const SHORT = 57352
const SMALL = 57353
const INT = 57354
const CHAR = 57355
const BOOLEAN = 57356
const BYTE = 57357
const VOID = 57358
const HANDLE_T = 57359
const ERROR_STATUS_T = 57360
const ISO_LATIN_1 = 57361
const ISO_MULTILINGUAL = 57362
const ISO_UCS = 57363
const STRUCT = 57364
const FIRST_IS = 57365
const LAST_IS = 57366
const LENGTH_IS = 57367
const MAX_IS = 57368
const MIN_IS = 57369
const SIZE_IS = 57370
const SWITCH_IS = 57371
const USAGE_STRING = 57372
const USAGE_CONTEXT_HANDLE = 57373
const FORMAT = 57374
const FORMAT_NULL_TERMINATED = 57375
const FORMAT_MULTI_SIZE = 57376
const FORMAT_UTF8 = 57377
const FORMAT_RUNE = 57378
const FORMAT_HEX = 57379
const IGNORE = 57380
const POINTER = 57381
const POINTER_REF = 57382
const POINTER_UNIQUE = 57383
const POINTER_PTR = 57384
const CONST = 57385
const NULL = 57386
const TRUE = 57387
const FALSE = 57388
const IN = 57389
const OUT = 57390
const ENUM = 57391
const PIPE = 57392
const UNION = 57393
const SWITCH = 57394
const CASE = 57395
const DEFAULT = 57396
const SWITCH_TYPE = 57397
const TRANSMIT_AS = 57398
const HANDLE = 57399
const IMPORT = 57400
const TYPEDEF = 57401
const UUID = 57402
const INTERFACE = 57403
const IDEMPOTENT = 57404
const BROADCAST = 57405
const MAYBE = 57406
const REFLECT_DELETIONS = 57407
const VERSION = 57408
const ENDPOINT = 57409
const EXCEPTIONS = 57410
const LOCAL = 57411
const POINTER_DEFAULT = 57412
const RETVAL = 57413
const IID_IS = 57414
const WCHAR_T = 57415
const INT3264 = 57416
const INT8 = 57417
const INT16 = 57418
const INT32 = 57419
const INT64 = 57420
const RANGE = 57421
const MS_UNION = 57422
const OBJECT = 57423
const V1_ENUM = 57424
const STRICT_CONTEXT_HANDLE = 57425
const TYPE_STRICT_CONTEXT_HANDLE = 57426
const DISABLE_CONSISTENCY_CHECK = 57427
const SIZEOF = 57428
const PRAGMA_DEFINE = 57429
const PRAGMA_CPP_QUOTE = 57430
const CALLBACK = 57431
const HELP_STRING = 57432
const DUAL = 57433
const PROPGET = 57434
const PROPPUT = 57435
const PROPPUTREF = 57436
const ID = 57437
const HIDDEN = 57438
const NONEXTENSIBLE = 57439
const RESTRICTED = 57440
const DEFAULT_VALUE = 57441
const ODL = 57442
const OLEAUTOMATION = 57443
const OPTIONAL = 57444
const APPOBJECT = 57445
const SAFEARRAY = 57446
const PAD = 57447
const GOEXT_LAYOUT = 57448
const GOEXT_DEFAULT_NULL = 57449
const GOEXT_NO_SIZE_LIMIT = 57450
const CALL_AS = 57451
const ANNOTATION = 57452
const WIRE_MARSHAL = 57453
const PUBLIC = 57454
const SOURCE = 57455
const DISPINTERFACE = 57456
const METHODS = 57457
const PROPERTIES = 57458
const COCLASS = 57459
const LIBRARY = 57460
const ACS_BYTE_COUNT = 57461
const STRING = 57462
const CHARACTER_LITERAL = 57463
const STRING_LITERAL = 57464
const INT_LITERAL = 57465
const IDENT = 57466
const TERNARY = 57467
const RNG = 57468
const LOGICAL_OR = 57469
const LOGICAL_AND = 57470
const LE = 57471
const GE = 57472
const LT = 57473
const GT = 57474
const EQ = 57475
const NE = 57476
const OR = 57477
const XOR = 57478
const AND = 57479
const LSH = 57480
const RSH = 57481
const UPLUS = 57482
const UNEG = 57483
const UNOT = 57484
const CAST = 57485
const UMINUS = 57486
const UMUL = 57487

var RPCToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FLOAT",
	"DOUBLE",
	"HYPER",
	"UNSIGNED",
	"SIGNED",
	"LONG",
	"SHORT",
	"SMALL",
	"INT",
	"CHAR",
	"BOOLEAN",
	"BYTE",
	"VOID",
	"HANDLE_T",
	"ERROR_STATUS_T",
	"ISO_LATIN_1",
	"ISO_MULTILINGUAL",
	"ISO_UCS",
	"STRUCT",
	"FIRST_IS",
	"LAST_IS",
	"LENGTH_IS",
	"MAX_IS",
	"MIN_IS",
	"SIZE_IS",
	"SWITCH_IS",
	"USAGE_STRING",
	"USAGE_CONTEXT_HANDLE",
	"FORMAT",
	"FORMAT_NULL_TERMINATED",
	"FORMAT_MULTI_SIZE",
	"FORMAT_UTF8",
	"FORMAT_RUNE",
	"FORMAT_HEX",
	"IGNORE",
	"POINTER",
	"POINTER_REF",
	"POINTER_UNIQUE",
	"POINTER_PTR",
	"CONST",
	"NULL",
	"TRUE",
	"FALSE",
	"IN",
	"OUT",
	"ENUM",
	"PIPE",
	"UNION",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"SWITCH_TYPE",
	"TRANSMIT_AS",
	"HANDLE",
	"IMPORT",
	"TYPEDEF",
	"UUID",
	"INTERFACE",
	"IDEMPOTENT",
	"BROADCAST",
	"MAYBE",
	"REFLECT_DELETIONS",
	"VERSION",
	"ENDPOINT",
	"EXCEPTIONS",
	"LOCAL",
	"POINTER_DEFAULT",
	"RETVAL",
	"IID_IS",
	"WCHAR_T",
	"INT3264",
	"INT8",
	"INT16",
	"INT32",
	"INT64",
	"RANGE",
	"MS_UNION",
	"OBJECT",
	"V1_ENUM",
	"STRICT_CONTEXT_HANDLE",
	"TYPE_STRICT_CONTEXT_HANDLE",
	"DISABLE_CONSISTENCY_CHECK",
	"SIZEOF",
	"PRAGMA_DEFINE",
	"PRAGMA_CPP_QUOTE",
	"CALLBACK",
	"HELP_STRING",
	"DUAL",
	"PROPGET",
	"PROPPUT",
	"PROPPUTREF",
	"ID",
	"HIDDEN",
	"NONEXTENSIBLE",
	"RESTRICTED",
	"DEFAULT_VALUE",
	"ODL",
	"OLEAUTOMATION",
	"OPTIONAL",
	"APPOBJECT",
	"SAFEARRAY",
	"PAD",
	"GOEXT_LAYOUT",
	"GOEXT_DEFAULT_NULL",
	"GOEXT_NO_SIZE_LIMIT",
	"CALL_AS",
	"ANNOTATION",
	"WIRE_MARSHAL",
	"PUBLIC",
	"SOURCE",
	"DISPINTERFACE",
	"METHODS",
	"PROPERTIES",
	"COCLASS",
	"LIBRARY",
	"ACS_BYTE_COUNT",
	"STRING",
	"CHARACTER_LITERAL",
	"STRING_LITERAL",
	"INT_LITERAL",
	"IDENT",
	"TERNARY",
	"RNG",
	"LOGICAL_OR",
	"LOGICAL_AND",
	"LE",
	"GE",
	"LT",
	"GT",
	"EQ",
	"NE",
	"OR",
	"XOR",
	"AND",
	"LSH",
	"RSH",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UPLUS",
	"UNEG",
	"UNOT",
	"CAST",
	"UMINUS",
	"UMUL",
	"';'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"','",
	"':'",
	"'('",
	"')'",
	"'.'",
	"'='",
	"'?'",
	"'~'",
	"'!'",
}

var RPCStatenames = [...]string{}

const RPCEofCode = 1
const RPCErrCode = 2
const RPCInitialStackSize = 16

//line midl/parse.y:2757

//line yacctab:1
var RPCExca = [...]int16{
	-1, 0,
	1, 1,
	-2, 46,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 2,
	-2, 46,
	-1, 249,
	153, 116,
	-2, 46,
	-1, 265,
	115, 36,
	116, 36,
	153, 36,
	-2, 46,
	-1, 272,
	151, 199,
	156, 199,
	-2, 340,
	-1, 419,
	115, 37,
	116, 37,
	153, 37,
	-2, 46,
	-1, 420,
	115, 35,
	116, 35,
	153, 35,
	-2, 46,
	-1, 467,
	2, 340,
	124, 340,
	158, 340,
	-2, 199,
	-1, 557,
	159, 250,
	-2, 247,
	-1, 561,
	159, 250,
	-2, 247,
	-1, 585,
	159, 251,
	-2, 243,
}

const RPCPrivate = 57344

const RPCLast = 1103

var RPCAct = [...]int16{
	368, 589, 426, 182, 540, 587, 354, 26, 584, 539,
	583, 582, 358, 543, 367, 189, 390, 218, 362, 387,
	425, 353, 173, 361, 349, 273, 346, 66, 352, 351,
	348, 19, 345, 19, 252, 260, 301, 74, 287, 286,
	278, 404, 200, 196, 198, 193, 195, 214, 199, 194,
	192, 35, 282, 14, 86, 14, 197, 56, 5, 37,
	38, 39, 250, 201, 481, 520, 366, 76, 191, 77,
	570, 313, 183, 79, 604, 604, 527, 610, 603, 318,
	161, 207, 494, 207, 611, 166, 602, 170, 605, 601,
	186, 187, 188, 172, 341, 299, 300, 302, 303, 65,
	68, 69, 70, 595, 7, 305, 306, 307, 308, 292,
	310, 311, 312, 295, 317, 581, 580, 537, 206, 208,
	206, 208, 498, 496, 483, 497, 495, 488, 207, 489,
	483, 511, 207, 487, 274, 202, 203, 591, 510, 209,
	297, 298, 296, 483, 483, 483, 486, 485, 484, 483,
	509, 508, 482, 210, 160, 210, 560, 507, 204, 205,
	561, 480, 506, 505, 309, 206, 208, 185, 184, 206,
	208, 504, 272, 503, 502, 501, 500, 499, 493, 207,
	253, 492, 202, 203, 209, 491, 202, 203, 209, 490,
	161, 462, 343, 314, 557, 315, 546, 316, 526, 360,
	210, 340, 14, 246, 210, 204, 205, 244, 251, 204,
	205, 183, 269, 243, 342, 294, 206, 208, 242, 241,
	240, 239, 238, 237, 236, 235, 347, 234, 233, 232,
	344, 231, 523, 202, 203, 374, 395, 183, 230, 229,
	396, 375, 228, 227, 226, 33, 400, 411, 393, 156,
	225, 210, 224, 223, 383, 402, 204, 205, 403, 222,
	221, 220, 72, 600, 268, 575, 336, 337, 338, 339,
	536, 271, 266, 265, 520, 513, 417, 416, 347, 414,
	253, 405, 27, 407, 406, 408, 27, 392, 369, 370,
	371, 372, 373, 365, 145, 545, 219, 422, 419, 146,
	431, 421, 14, 20, 436, 613, 608, 20, 251, 31,
	547, 29, 412, 31, 183, 29, 357, 441, 442, 33,
	423, 357, 10, 566, 33, 357, 516, 472, 33, 545,
	544, 170, 565, 471, 76, 77, 545, 544, 563, 33,
	357, 469, 471, 359, 433, 463, 461, 21, 22, 464,
	33, 21, 22, 364, 467, 267, 33, 33, 347, 473,
	158, 157, 474, 254, 154, 154, 445, 448, 449, 447,
	444, 446, 465, 470, 454, 455, 458, 459, 460, 479,
	456, 457, 450, 451, 452, 453, 10, 443, 73, 216,
	597, 549, 75, 357, 75, 216, 33, 405, 263, 407,
	406, 408, 478, 248, 564, 264, 468, 217, 213, 49,
	48, 47, 152, 46, 33, 41, 558, 519, 33, 319,
	435, 322, 432, 515, 475, 466, 36, 429, 413, 612,
	45, 44, 347, 43, 332, 331, 571, 528, 170, 333,
	334, 335, 171, 168, 321, 347, 465, 512, 414, 329,
	330, 422, 320, 517, 341, 518, 323, 324, 530, 533,
	534, 75, 535, 532, 531, 529, 609, 327, 328, 325,
	326, 59, 65, 68, 69, 70, 391, 58, 60, 363,
	61, 148, 551, 410, 65, 68, 69, 70, 538, 434,
	305, 548, 350, 514, 75, 215, 424, 415, 552, 550,
	399, 398, 167, 165, 164, 163, 162, 71, 553, 401,
	385, 388, 397, 394, 556, 555, 554, 42, 211, 51,
	54, 261, 53, 559, 257, 409, 562, 158, 157, 4,
	78, 176, 440, 545, 544, 476, 477, 430, 174, 473,
	175, 438, 347, 175, 572, 304, 183, 183, 573, 576,
	578, 567, 568, 470, 579, 574, 465, 135, 136, 137,
	3, 592, 247, 34, 255, 586, 67, 1, 293, 586,
	437, 376, 594, 593, 596, 52, 150, 258, 51, 50,
	262, 88, 599, 63, 64, 598, 62, 290, 57, 289,
	607, 288, 606, 180, 177, 178, 179, 181, 291, 285,
	294, 572, 176, 183, 212, 284, 614, 276, 55, 616,
	592, 617, 586, 615, 299, 300, 302, 303, 65, 68,
	69, 70, 356, 542, 305, 306, 307, 308, 292, 310,
	311, 312, 295, 299, 300, 302, 303, 65, 68, 69,
	70, 541, 355, 305, 306, 585, 308, 292, 310, 311,
	312, 295, 569, 274, 378, 379, 377, 380, 381, 297,
	298, 296, 590, 588, 180, 177, 178, 179, 181, 68,
	69, 70, 274, 169, 68, 69, 70, 525, 297, 298,
	296, 439, 524, 309, 68, 69, 70, 427, 428, 522,
	418, 521, 190, 577, 108, 92, 90, 259, 153, 245,
	277, 382, 309, 30, 24, 94, 25, 32, 275, 23,
	28, 256, 281, 283, 280, 279, 11, 13, 12, 149,
	40, 389, 386, 384, 249, 147, 270, 420, 155, 17,
	8, 151, 16, 15, 294, 6, 159, 18, 9, 2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 80, 81, 82, 84, 83, 85,
	140, 138, 139, 89, 73, 0, 0, 0, 0, 91,
	0, 135, 136, 137, 0, 0, 0, 0, 141, 142,
	0, 0, 0, 33, 476, 477, 143, 93, 95, 0,
	0, 100, 0, 96, 97, 98, 99, 101, 102, 103,
	104, 105, 112, 113, 0, 0, 0, 0, 0, 0,
	144, 107, 110, 106, 0, 0, 109, 0, 0, 0,
	111, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 132, 133, 134, 87, 0,
	129, 128, 130, 131, 80, 81, 82, 84, 83, 85,
	140, 138, 139, 89, 0, 0, 0, 0, 0, 91,
	0, 135, 136, 137, 0, 0, 0, 0, 141, 142,
	0, 0, 0, 0, 0, 0, 143, 93, 95, 0,
	0, 100, 0, 96, 97, 98, 99, 101, 102, 103,
	104, 105, 112, 113, 0, 0, 0, 0, 0, 0,
	144, 107, 110, 106, 0, 0, 109, 0, 0, 0,
	111, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 132, 133, 134, 87, 0,
	129, 128, 130, 131, 299, 300, 302, 303, 65, 68,
	69, 70, 0, 0, 305, 306, 307, 308, 292, 310,
	311, 312, 295, 299, 300, 302, 303, 65, 68, 69,
	70, 0, 0, 305, 306, 307, 308, 292, 310, 311,
	312, 0, 0, 274, 0, 0, 0, 0, 0, 297,
	298, 296, 299, 300, 302, 303, 65, 68, 69, 70,
	0, 0, 305, 306, 307, 308, 292, 310, 311, 312,
	0, 0, 0, 309, 0, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 309, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294,
}

var RPCPact = [...]int16{
	264, -1000, 264, -1000, -1000, -1000, 275, 275, 275, 275,
	395, 282, 280, -1000, 279, 261, 259, 258, 257, 461,
	464, 383, 104, -1000, -1000, -1000, 234, 370, -1000, 370,
	-1000, 370, -1000, 821, -1000, -1000, -1000, -1000, -1000, -1000,
	143, -1000, -1000, -1000, -1000, -1000, 328, 211, 412, 203,
	382, 381, 380, 379, 203, 378, -1000, -1000, 301, 660,
	-1000, 300, -1000, -1000, -1000, 665, 531, 590, -1000, -1000,
	-1000, 46, 396, 821, 256, -1000, 343, 255, 140, -1000,
	103, 102, 101, 95, 94, 92, -1000, 86, -1000, 85,
	-1000, -1000, -1000, 84, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 81, 80, 73, -1000, 71, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 70, 69, -1000, -1000, -1000, -1000, 67,
	-1000, -1000, -1000, 66, -1000, -1000, -1000, -1000, 65, 64,
	63, -1000, 62, 61, 60, -1000, -1000, -1000, -1000, -1000,
	55, -1000, -1000, 49, 45, -1000, 395, 250, -1000, 260,
	-1000, 210, -1000, 463, 467, 245, -1000, 116, 115, 202,
	275, 402, -1000, -1000, -1000, 114, 930, -90, -1000, -1000,
	528, -1000, 528, -1000, 528, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-48, 291, 317, 308, 284, 323, 338, 311, 294, 297,
	-1000, -1000, -3, -3, -3, -3, -1000, 43, -1000, 330,
	46, 33, 140, 203, 368, 189, 41, 355, 198, 821,
	42, 42, 42, 42, 42, 93, 42, 621, 978, 387,
	389, 352, 517, 42, 391, 42, 46, 390, 377, 376,
	930, 386, 203, 42, 476, -1000, 42, -1000, -1000, 260,
	-1000, -1000, 277, 949, -1000, -1000, 373, -1000, -1000, 120,
	-1000, -1000, -1000, -1000, -1000, 203, 203, -1000, 275, -1000,
	-1000, 372, 285, 494, 978, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 270, 337, 268, 930, -1000,
	-1000, -1000, 534, 675, 519, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 46, -1000, -1000, -1000, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, -1000, -1000, -1000, -1000,
	930, -1000, 32, -1000, 190, 196, -1000, 274, 930, 254,
	-1000, 188, 174, -1000, -1000, 165, -1000, -1000, 273, 731,
	476, 5, -1000, -97, -1000, -1000, -7, -1000, -1000, -11,
	-12, -13, -26, -32, -30, 30, 26, -1000, -1000, -1000,
	-1000, -1000, 22, -1000, 19, -78, -33, -1000, -1000, -34,
	-1000, -1000, 18, 17, 16, 15, 14, 12, 4, 3,
	-2, -8, -9, -21, -28, -1000, -1000, -1000, -1000, 370,
	665, 119, -1000, -1000, 369, 272, 171, 467, -1000, 203,
	203, 266, 978, -1000, -1000, 118, -1000, 74, 295, -1000,
	-1000, -1000, 203, 368, 189, 355, -1000, 528, -1000, 528,
	-1000, -1000, 113, 291, 317, 308, 284, 323, 338, 338,
	311, 311, 311, 311, 294, 294, 297, 297, -1000, -1000,
	-1000, -42, -1000, -1000, -1000, -1000, -1000, 285, 480, -1000,
	-1000, 482, -1000, -1000, -1000, -1000, 38, 155, 367, 238,
	355, 42, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 385, -1000, 389, -1000, 352, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42, 36, -1000, -1000, -1000, 265, -1000,
	285, 2, -1000, 285, -1000, -1000, -1000, -1000, -1000, 185,
	252, 179, 170, 5, -1000, -1000, 42, -1000, -91, 283,
	-1000, 242, -1000, -1000, 108, 46, 46, 165, -43, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -44, 629, -1000, -1000,
	-5, 629, -56, -1000, 480, -1000, -1000, 237, -1000, -1000,
	42, -1000, -1000, -1000, -1000, 165, 106, -70, -1000, -1000,
	-1000, -1000, -81, -71, -1000, -1000, 610, 285, 151, 340,
	-1000, 330, -1000, -82, -75, -1000, 276, -1000, -1000, -1000,
	-1000, 150, 46, -1000, 91, -1000, 285, -1000, -1000, -5,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var RPCPgo = [...]int16{
	0, 560, 739, 738, 737, 736, 735, 733, 104, 732,
	731, 412, 730, 729, 728, 249, 727, 726, 725, 62,
	724, 723, 722, 19, 721, 16, 720, 719, 529, 415,
	58, 34, 718, 717, 716, 715, 714, 713, 712, 5,
	711, 710, 709, 708, 52, 707, 706, 41, 705, 704,
	703, 701, 25, 40, 700, 699, 530, 30, 7, 698,
	697, 73, 35, 696, 695, 694, 693, 3, 0, 15,
	692, 68, 50, 45, 49, 46, 43, 56, 44, 48,
	42, 63, 2, 691, 20, 8, 11, 32, 690, 26,
	12, 37, 689, 688, 687, 18, 682, 677, 663, 662,
	1, 652, 14, 66, 23, 47, 9, 29, 28, 24,
	4, 21, 642, 641, 13, 6, 623, 622, 608, 607,
	605, 599, 39, 598, 38, 591, 589, 587, 36, 586,
	584, 583, 581, 571, 570, 545, 27, 568, 54, 567,
	51, 17, 22, 10,
}

var RPCR1 = [...]uint8{
	0, 139, 139, 2, 2, 1, 1, 1, 1, 1,
	1, 140, 140, 3, 4, 5, 5, 8, 9, 10,
	10, 11, 40, 40, 59, 59, 60, 60, 62, 62,
	12, 13, 14, 14, 15, 15, 88, 88, 16, 16,
	6, 6, 6, 7, 17, 17, 57, 57, 58, 58,
	56, 56, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 21, 21,
	22, 22, 24, 24, 23, 25, 18, 20, 20, 27,
	27, 28, 19, 19, 30, 30, 30, 30, 26, 26,
	29, 32, 33, 33, 118, 118, 118, 118, 118, 118,
	118, 67, 67, 67, 67, 67, 67, 68, 69, 69,
	70, 70, 71, 71, 72, 72, 73, 73, 74, 74,
	75, 75, 75, 76, 76, 76, 76, 76, 77, 77,
	77, 78, 78, 78, 79, 79, 79, 79, 80, 80,
	80, 80, 80, 81, 81, 81, 81, 81, 34, 39,
	39, 39, 39, 52, 52, 52, 53, 84, 84, 84,
	82, 83, 83, 83, 83, 92, 92, 44, 44, 44,
	119, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	121, 121, 121, 128, 128, 128, 129, 129, 131, 131,
	130, 130, 130, 130, 130, 130, 136, 136, 136, 122,
	123, 124, 125, 126, 127, 134, 134, 135, 135, 135,
	143, 143, 142, 142, 43, 43, 43, 43, 43, 42,
	42, 35, 41, 91, 87, 87, 89, 90, 101, 101,
	49, 49, 36, 36, 36, 105, 47, 47, 47, 47,
	47, 50, 50, 50, 109, 109, 106, 106, 108, 108,
	107, 107, 110, 110, 113, 113, 111, 111, 114, 112,
	66, 66, 116, 117, 115, 115, 48, 63, 38, 46,
	46, 45, 104, 104, 141, 141, 95, 95, 37, 96,
	98, 98, 98, 99, 100, 100, 132, 132, 133, 133,
	133, 133, 133, 51, 65, 55, 103, 103, 102, 102,
	94, 94, 93, 93, 138, 138, 138, 31, 31, 86,
	86, 85, 85, 64, 64, 97, 97, 54, 54, 137,
	137, 137,
}

var RPCR2 = [...]int8{
	0, 0, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 0, 1, 4, 3, 2, 3, 4, 3, 1,
	2, 4, 1, 1, 0, 4, 1, 3, 1, 1,
	4, 3, 1, 2, 3, 3, 0, 1, 2, 3,
	4, 1, 3, 4, 0, 2, 0, 1, 4, 5,
	1, 3, 4, 4, 4, 4, 4, 4, 1, 4,
	1, 4, 1, 1, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 1, 1, 1,
	1, 4, 1, 1, 1, 4, 1, 1, 1, 1,
	4, 4, 4, 1, 4, 4, 4, 4, 1, 3,
	1, 3, 1, 3, 1, 1, 2, 1, 2, 0,
	1, 3, 1, 2, 2, 2, 1, 2, 1, 3,
	1, 5, 3, 4, 1, 1, 1, 2, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 3, 1, 2,
	2, 2, 2, 1, 4, 1, 2, 3, 5, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 0,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 3, 2, 3, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	0, 1, 0, 1, 1, 1, 1, 1, 1, 2,
	1, 4, 5, 1, 1, 2, 2, 4, 0, 2,
	2, 1, 6, 4, 4, 5, 1, 1, 1, 1,
	2, 7, 5, 5, 0, 1, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 1, 3, 6,
	1, 3, 3, 4, 1, 2, 4, 4, 5, 2,
	1, 6, 1, 3, 0, 1, 1, 3, 2, 4,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 5, 1, 3, 0, 1,
	0, 1, 1, 2, 1, 1, 1, 6, 6, 3,
	1, 3, 2, 1, 1, 4, 4, 1, 1, 1,
	1, 1,
}

var RPCChk = [...]int16{
	-1000, -139, -2, -1, -28, -30, -6, -8, -12, -3,
	58, -34, -32, -33, -44, -7, -9, -13, -4, -57,
	43, 87, 88, -42, -49, -46, -58, 22, -41, 51,
	-50, 49, -45, 154, -1, -140, 151, -140, -140, -140,
	-26, -29, 122, 151, 151, 151, 152, 152, 152, 152,
	118, 117, 114, 61, 59, -118, -128, 124, 13, 7,
	14, 16, -129, -131, -130, 8, -136, -135, 9, 10,
	11, 124, 158, 154, -91, 124, -91, -91, -56, -61,
	23, 24, 25, 27, 26, 28, -138, 107, -132, 32,
	-63, 38, -64, 56, -48, 57, 62, 63, 64, 65,
	60, 66, 67, 68, 69, 70, 82, 80, -65, 85,
	81, 89, 71, 72, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 110, 109,
	111, 112, 104, 105, 106, 40, 41, 42, 30, 31,
	29, 47, 48, 55, 79, 151, 156, -18, 153, -27,
	-28, -10, -11, -59, 154, -14, -15, 116, 115, -5,
	-8, -57, 124, 124, 124, 124, -57, 124, 142, 13,
	-136, 142, -136, -142, 7, 12, 12, 75, 76, 77,
	74, 78, -67, -68, 122, 121, 44, 45, 46, -69,
	-70, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, 140, 141, 163, 164, 123, 86, 124, 142,
	158, 122, -56, 152, -105, 152, 52, 152, -141, 156,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, -55, 158, -29, 153, -20,
	-19, -30, -31, -57, 153, -11, -40, 61, 114, -60,
	-62, 54, 113, 153, -15, 157, 157, 153, -8, -140,
	-17, 157, -39, -52, 43, -43, -119, -54, -53, -35,
	-36, -38, -44, -37, -120, -121, -122, -124, -125, -126,
	-127, -123, 18, -137, 124, 22, 51, 49, 50, 4,
	5, -128, 6, 7, -135, 14, 15, 16, 17, 73,
	19, 20, 21, 161, -142, -142, -142, 162, 127, 128,
	135, 136, 137, 133, 134, 131, 132, 129, 130, 138,
	139, 141, 140, 142, 143, 144, -81, -81, -81, -81,
	158, 124, -67, 159, -141, -87, -89, -90, -57, -109,
	124, -107, -108, -111, -115, -112, -117, 151, -90, 154,
	158, -104, -95, 124, 155, -61, -103, -102, -68, -103,
	-103, -103, -103, -103, 142, -102, -133, 35, 33, 34,
	36, 37, -51, -52, -21, 123, -22, -23, 122, -24,
	-25, 124, -138, -102, 122, -68, -67, 122, 124, 124,
	-39, 123, -90, -102, -47, -128, -122, -124, -53, 49,
	7, -68, -19, 151, -52, 124, -141, 156, -88, -87,
	-16, -31, -57, -140, 124, -84, -82, -94, -93, 142,
	43, -52, 152, -105, 152, 152, -39, -134, 7, 6,
	13, -67, -68, -71, -72, -73, -74, -75, -76, -76,
	-77, -77, -77, -77, -78, -78, -79, -79, -80, -80,
	-80, -39, 159, 155, 153, -89, 151, -39, 152, 153,
	-111, 154, 153, -115, -115, 151, 53, 54, -47, -141,
	156, 161, 159, 156, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 160, 159, 156, 159, 156, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, -91, 156, 124, 151, 155, -62, -31, 151,
	156, -83, -92, 158, -96, -97, 124, 2, 142, -87,
	-109, -107, -108, -104, -142, -142, 157, 159, -84, -106,
	-110, -113, -116, -114, 54, 53, 158, 155, 124, 153,
	-95, -68, -102, 123, -23, -25, -68, 158, 151, -82,
	154, 158, -82, 153, 152, 153, 153, -141, -69, -101,
	161, 153, -110, -115, -114, 157, -67, -66, -67, -115,
	159, 159, -86, -143, -85, 16, -58, -39, -98, -100,
	-99, 142, -68, -86, -143, 159, -106, 153, -102, -115,
	157, 159, 156, 159, 156, 159, -39, -82, 155, 126,
	159, 159, 153, 155, -67, -85, -82, -100,
}

var RPCDef = [...]int16{
	-2, -2, -2, 3, 5, 6, 11, 11, 11, 11,
	0, 0, 0, 126, 0, 41, 0, 0, 0, 0,
	247, 0, 0, 207, 208, 209, 47, 0, 260, 0,
	271, 0, 310, 0, 4, 7, 12, 8, 9, 10,
	0, 128, 130, 124, 125, 127, 119, 24, 0, 46,
	0, 0, 0, 0, 46, 0, 134, 135, 136, 248,
	138, 0, 223, 224, 225, 249, 252, 0, 236, 237,
	238, 0, 0, 0, 259, 263, 270, 309, 314, 50,
	0, 0, 0, 0, 0, 0, 58, 0, 60, 0,
	62, 63, 64, 0, 66, 67, 68, 69, 70, 71,
	72, 0, 0, 0, 76, 0, 78, 79, 80, 81,
	82, 83, 84, 0, 0, 87, 88, 89, 90, 0,
	92, 93, 94, 0, 96, 97, 98, 99, 0, 0,
	0, 103, 0, 0, 0, 344, 345, 346, 326, 327,
	0, 353, 354, 0, 0, 121, 0, 0, 42, 46,
	120, 24, 19, 0, 0, 0, 32, 0, 0, 46,
	11, 0, 14, 18, 31, 44, 247, 0, 140, 137,
	252, 139, 252, 227, 252, 253, 230, 231, 232, 233,
	234, 235, 132, 141, 142, 143, 144, 145, 146, 147,
	148, 150, 152, 154, 156, 158, 160, 163, 168, 171,
	174, 178, 0, 0, 0, 0, 183, 0, 185, 0,
	0, 0, 314, 46, 284, 46, 0, 0, 0, 315,
	338, 338, 338, 338, 338, 338, 338, 0, 247, 0,
	0, 0, 0, 338, 0, 0, 0, 0, 0, 0,
	247, 0, 46, 338, 247, 334, 0, 129, 40, -2,
	117, 122, 0, 247, 17, 20, 0, 22, 23, 314,
	26, 28, 29, 30, 33, -2, 46, 13, 11, 15,
	43, 0, -2, 189, 247, 192, 193, 194, 195, 254,
	255, 256, 257, 258, 210, 211, 212, 213, 214, 215,
	216, 217, 357, 358, 196, 0, 0, 0, 247, 218,
	219, 220, 245, 248, 0, 241, 242, 243, 244, 240,
	359, 360, 361, 0, 229, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 180, 181, 182,
	247, 186, 0, 133, 0, 46, 264, 0, 247, 0,
	285, 0, 46, 290, 288, 46, 297, 304, 0, 0,
	247, 314, 312, 316, 48, 51, 0, 336, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 333, 0, 108, 0, 110, 114, 0,
	112, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 278, 279, 0,
	248, 0, 118, 123, 0, 0, 0, 315, 34, -2,
	-2, 0, 247, 16, 45, 188, 197, 0, 341, 342,
	191, 190, 46, 284, 46, 0, 318, 252, 246, 252,
	239, 131, 0, 151, 153, 155, 157, 159, 161, 162,
	164, 165, 166, 167, 169, 170, 172, 173, 175, 176,
	177, 0, 187, 49, 262, 265, 266, -2, 0, 282,
	291, 0, 283, 289, 296, 305, 0, 0, 0, 0,
	315, 0, 52, 338, 53, 54, 55, 56, 57, 107,
	59, 61, 65, 73, 0, 74, 0, 75, 0, 77,
	85, 86, 91, 95, 100, 101, 102, 104, 105, 106,
	307, 306, 280, 0, 0, 21, 25, 27, 0, 38,
	340, 200, 201, 340, 203, 204, 205, 206, 343, 46,
	0, 0, 46, 314, 221, 222, 0, 184, 268, 0,
	286, 46, 293, 294, 0, 0, 0, 46, 0, 311,
	313, 317, 337, 109, 111, 113, 0, -2, 39, 198,
	320, -2, 0, 261, 0, 273, 274, 0, 149, 267,
	338, 281, 287, 292, 295, 46, 0, 0, 300, 303,
	275, 335, 0, 0, 350, -2, 247, 340, 0, 321,
	322, 324, 325, 0, 0, 202, 0, 308, 269, 302,
	298, 0, 0, 347, 247, 348, 340, 352, 319, 0,
	355, 356, 272, 299, 301, 349, 351, 323,
}

var RPCTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 164, 3, 3, 3, 144, 3, 3,
	158, 159, 142, 140, 156, 141, 160, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 157, 151,
	3, 161, 3, 162, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 154, 3, 155, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 152, 3, 153, 163,
}

var RPCTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 145, 146,
	147, 148, 149, 150,
}

var RPCTok3 = [...]int8{
	0,
}

var RPCErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	RPCDebug        = 0
	RPCErrorVerbose = false
)

type RPCLexer interface {
	Lex(lval *RPCSymType) int
	Error(s string)
}

type RPCParser interface {
	Parse(RPCLexer) int
	Lookahead() int
}

type RPCParserImpl struct {
	lval  RPCSymType
	stack [RPCInitialStackSize]RPCSymType
	char  int
}

func (p *RPCParserImpl) Lookahead() int {
	return p.char
}

func RPCNewParser() RPCParser {
	return &RPCParserImpl{}
}

const RPCFlag = -1000

func RPCTokname(c int) string {
	if c >= 1 && c-1 < len(RPCToknames) {
		if RPCToknames[c-1] != "" {
			return RPCToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RPCStatname(s int) string {
	if s >= 0 && s < len(RPCStatenames) {
		if RPCStatenames[s] != "" {
			return RPCStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func RPCErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !RPCErrorVerbose {
		return "syntax error"
	}

	for _, e := range RPCErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + RPCTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(RPCPact[state])
	for tok := TOKSTART; tok-1 < len(RPCToknames); tok++ {
		if n := base + tok; n >= 0 && n < RPCLast && int(RPCChk[int(RPCAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if RPCDef[state] == -2 {
		i := 0
		for RPCExca[i] != -1 || int(RPCExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; RPCExca[i] >= 0; i += 2 {
			tok := int(RPCExca[i])
			if tok < TOKSTART || RPCExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if RPCExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += RPCTokname(tok)
	}
	return res
}

func RPClex1(lex RPCLexer, lval *RPCSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(RPCTok1[0])
		goto out
	}
	if char < len(RPCTok1) {
		token = int(RPCTok1[char])
		goto out
	}
	if char >= RPCPrivate {
		if char < RPCPrivate+len(RPCTok2) {
			token = int(RPCTok2[char-RPCPrivate])
			goto out
		}
	}
	for i := 0; i < len(RPCTok3); i += 2 {
		token = int(RPCTok3[i+0])
		if token == char {
			token = int(RPCTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(RPCTok2[1]) /* unknown char */
	}
	if RPCDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RPCTokname(token), uint(char))
	}
	return char, token
}

func RPCParse(RPClex RPCLexer) int {
	return RPCNewParser().Parse(RPClex)
}

func (RPCrcvr *RPCParserImpl) Parse(RPClex RPCLexer) int {
	var RPCn int
	var RPCVAL RPCSymType
	var RPCDollar []RPCSymType
	_ = RPCDollar // silence set and not used
	RPCS := RPCrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	RPCstate := 0
	RPCrcvr.char = -1
	RPCtoken := -1 // RPCrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		RPCstate = -1
		RPCrcvr.char = -1
		RPCtoken = -1
	}()
	RPCp := -1
	goto RPCstack

ret0:
	return 0

ret1:
	return 1

RPCstack:
	/* put a state and value onto the stack */
	if RPCDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RPCTokname(RPCtoken), RPCStatname(RPCstate))
	}

	RPCp++
	if RPCp >= len(RPCS) {
		nyys := make([]RPCSymType, len(RPCS)*2)
		copy(nyys, RPCS)
		RPCS = nyys
	}
	RPCS[RPCp] = RPCVAL
	RPCS[RPCp].yys = RPCstate

RPCnewstate:
	RPCn = int(RPCPact[RPCstate])
	if RPCn <= RPCFlag {
		goto RPCdefault /* simple state */
	}
	if RPCrcvr.char < 0 {
		RPCrcvr.char, RPCtoken = RPClex1(RPClex, &RPCrcvr.lval)
	}
	RPCn += RPCtoken
	if RPCn < 0 || RPCn >= RPCLast {
		goto RPCdefault
	}
	RPCn = int(RPCAct[RPCn])
	if int(RPCChk[RPCn]) == RPCtoken { /* valid shift */
		RPCrcvr.char = -1
		RPCtoken = -1
		RPCVAL = RPCrcvr.lval
		RPCstate = RPCn
		if Errflag > 0 {
			Errflag--
		}
		goto RPCstack
	}

RPCdefault:
	/* default state action */
	RPCn = int(RPCDef[RPCstate])
	if RPCn == -2 {
		if RPCrcvr.char < 0 {
			RPCrcvr.char, RPCtoken = RPClex1(RPClex, &RPCrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RPCExca[xi+0] == -1 && int(RPCExca[xi+1]) == RPCstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			RPCn = int(RPCExca[xi+0])
			if RPCn < 0 || RPCn == RPCtoken {
				break
			}
		}
		RPCn = int(RPCExca[xi+1])
		if RPCn < 0 {
			goto ret0
		}
	}
	if RPCn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			RPClex.Error(RPCErrorMessage(RPCstate, RPCtoken))
			Nerrs++
			if RPCDebug >= 1 {
				__yyfmt__.Printf("%s", RPCStatname(RPCstate))
				__yyfmt__.Printf(" saw %s\n", RPCTokname(RPCtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for RPCp >= 0 {
				RPCn = int(RPCPact[RPCS[RPCp].yys]) + RPCErrCode
				if RPCn >= 0 && RPCn < RPCLast {
					RPCstate = int(RPCAct[RPCn]) /* simulate a shift of "error" */
					if int(RPCChk[RPCstate]) == RPCErrCode {
						goto RPCstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RPCDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RPCS[RPCp].yys)
				}
				RPCp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RPCDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RPCTokname(RPCtoken))
			}
			if RPCtoken == RPCEofCode {
				goto ret1
			}
			RPCrcvr.char = -1
			RPCtoken = -1
			goto RPCnewstate /* try again in the same state */
		}
	}

	/* reduction by production RPCn */
	if RPCDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", RPCn, RPCStatname(RPCstate))
	}

	RPCnt := RPCn
	RPCpt := RPCp
	_ = RPCpt // guard against "declared and not used"

	RPCp -= int(RPCR2[RPCn])
	// RPCp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if RPCp+1 >= len(RPCS) {
		nyys := make([]RPCSymType, len(RPCS)*2)
		copy(nyys, RPCS)
		RPCS = nyys
	}
	RPCVAL = RPCS[RPCp+1]

	/* consult goto table to find next state */
	RPCn = int(RPCR1[RPCn])
	RPCg := int(RPCPgo[RPCn])
	RPCj := RPCg + RPCS[RPCp].yys + 1

	if RPCj >= RPCLast {
		RPCstate = int(RPCAct[RPCg])
	} else {
		RPCstate = int(RPCAct[RPCj])
		if int(RPCChk[RPCstate]) != -RPCn {
			RPCstate = int(RPCAct[RPCg])
		}
	}
	// dummy call; replaced with literal code
	switch RPCnt {

	case 2:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:362
		{
			f := RPCDollar[1].File
			setResult(RPClex, &f)
		}
	case 3:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:369
		{
			RPCVAL.File = RPCDollar[1].File
			if len(RPCVAL.File.Interfaces) > 0 {
				if RPCVAL.File.Export == nil {
					RPCVAL.File.Export = make(map[string]*Export)
				}
				for i := range RPCVAL.File.Interfaces {
					iff := RPCVAL.File.Interfaces[i]
					if iff.Attrs.Object || iff.BaseName != "" {
						RPCVAL.File.Export[iff.Name] = &Export{Type: InterfaceToExport(iff), Position: Hash(iff.Name)}
					}
				}
			}
		}
	case 4:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:384
		{
			if len(RPCDollar[2].File.Imports) > 0 {
				RPCVAL.File.Imports = append(RPCVAL.File.Imports, RPCDollar[2].File.Imports...)
			}
			if len(RPCDollar[2].File.Export) > 0 {
				if RPCVAL.File.Export == nil {
					RPCVAL.File.Export = make(map[string]*Export)
				}
				for k, v := range RPCDollar[2].File.Export {
					RPCVAL.File.Export[k] = v
				}
			}
			if len(RPCDollar[2].File.Interfaces) > 0 {
				RPCVAL.File.Interfaces = append(RPCVAL.File.Interfaces, RPCDollar[2].File.Interfaces...)
				if RPCVAL.File.Export == nil {
					RPCVAL.File.Export = make(map[string]*Export)
				}
				for i := range RPCDollar[2].File.Interfaces {
					iff := RPCDollar[2].File.Interfaces[i]
					if iff.Attrs.Object || iff.BaseName != "" {
						RPCVAL.File.Export[iff.Name] = &Export{Type: InterfaceToExport(iff), Position: Hash(iff.Name)}
					}
				}
			}
			if len(RPCDollar[2].File.ComClasses) > 0 {
				RPCVAL.File.ComClasses = append(RPCVAL.File.ComClasses, RPCDollar[2].File.ComClasses...)
			}
			if len(RPCDollar[2].File.DispatchInterfaces) > 0 {
				RPCVAL.File.DispatchInterfaces = append(RPCVAL.File.DispatchInterfaces, RPCDollar[2].File.DispatchInterfaces...)
			}
			if len(RPCDollar[2].File.Libraries) > 0 {
				RPCVAL.File.Libraries = append(RPCVAL.File.Libraries, RPCDollar[2].File.Libraries...)
			}
		}
	case 5:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:421
		{
			RPCVAL.File = File{Imports: RPCDollar[1].Strings}
		}
	case 6:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:425
		{
			RPCVAL.File = File{Export: make(map[string]*Export)}
			if len(RPCDollar[1].Export) > 0 {
				for _, e := range RPCDollar[1].Export {
					RPCVAL.File.Export[e.Name] = e
					exportSyms(RPClex, e.Name, e)
				}
			}
		}
	case 7:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:435
		{
			iff := RPCDollar[1].Interface
			if iff.Attrs != nil {
				RPCVAL.File = File{Interfaces: []*Interface{&iff}}
			}
			if iff.BaseName != "" {
				typ, ok := lookupType(RPClex, iff.BaseName)
				if !ok {
					RPClex.Error("cannot find interface " + iff.BaseName)
					return 0
				}

				if typ.Kind == TypeAttribute {
					typ = typ.Elem
				}

				if iff.Base = typ.Interface; iff.Base != nil {
					inc := 0
					if l := len(iff.Base.Body.Operations); l > 0 {
						inc = iff.Base.Body.Operations[l-1].OpNum + 1
					}
					for i := range iff.Body.Operations {
						iff.Body.Operations[i].OpNum += inc
					}
				}
			}
			exportSyms(RPClex, iff.Name, &Export{Type: InterfaceToExport(&iff)})
		}
	case 8:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:464
		{
			cc := RPCDollar[1].ComClass
			RPCVAL.File = File{ComClasses: []*ComClass{&cc}}
		}
	case 9:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:469
		{
			di := RPCDollar[1].DispatchInterface
			RPCVAL.File = File{DispatchInterfaces: []*DispatchInterface{&di}}
		}
	case 10:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:474
		{
			lib := RPCDollar[1].Library
			RPCVAL.File = File{Libraries: []*Library{&lib}}
		}
	case 13:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:485
		{
			RPCVAL.Library = Library{Attrs: RPCDollar[1].Library.Attrs, Name: RPCDollar[1].Library.Name, Body: RPCDollar[3].Library.Body}
		}
	case 14:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:491
		{
			RPCVAL.Library = Library{Attrs: RPCDollar[1].Attr.Library(), Name: RPCDollar[3].Ident}
		}
	case 15:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:497
		{
			cc := RPCDollar[1].ComClass
			RPCVAL.Library = Library{Body: LibraryBody{ComClasses: []*ComClass{&cc}}}
		}
	case 16:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:502
		{
			cc := RPCDollar[2].ComClass
			RPCVAL.Library.Body.ComClasses = append(RPCVAL.Library.Body.ComClasses, &cc)
		}
	case 17:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:509
		{
			RPCVAL.ComClass = ComClass{Name: RPCDollar[1].ComClass.Name, Attrs: RPCDollar[1].ComClass.Attrs, Interfaces: RPCDollar[3].ComInterfaces}
		}
	case 18:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:515
		{
			RPCVAL.ComClass = ComClass{Attrs: RPCDollar[1].Attr.ComClass(), Name: RPCDollar[3].Ident}
		}
	case 19:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:521
		{
			RPCVAL.ComInterfaces = []*ComInterface{RPCDollar[1].ComInterface}
		}
	case 20:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:525
		{
			RPCVAL.ComInterfaces = append(RPCVAL.ComInterfaces, RPCDollar[2].ComInterface)
		}
	case 21:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:531
		{
			RPCVAL.ComInterface = &ComInterface{Name: RPCDollar[3].Ident, Type: RPCDollar[2].Type, Attrs: RPCDollar[1].Attr.ComInterface()}
		}
	case 22:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:537
		{
			RPCVAL.Type = &Type{Kind: TypeInterface}
		}
	case 23:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:541
		{
			RPCVAL.Type = &Type{Kind: TypeDispInterface}
		}
	case 24:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:547
		{
			RPCVAL.Attr = pAttr{}
		}
	case 25:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:551
		{
			RPCVAL.Attr = RPCDollar[2].Attr
		}
	case 26:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:557
		{
			switch RPCDollar[1].AttrType.Type {
			case DEFAULT:
				RPCVAL.Attr.Default = true
			case SOURCE:
				RPCVAL.Attr.Source = true
			}
		}
	case 27:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:566
		{
			switch RPCDollar[3].AttrType.Type {
			case DEFAULT:
				RPCVAL.Attr.Default = true
			case SOURCE:
				RPCVAL.Attr.Source = true
			}
		}
	case 28:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:578
		{
			RPCVAL.AttrType = pAttrType{DEFAULT, pAttr{}}
		}
	case 29:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:582
		{
			RPCVAL.AttrType = pAttrType{SOURCE, pAttr{}}
		}
	case 30:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:588
		{
			RPCVAL.DispatchInterface = DispatchInterface{Name: RPCDollar[1].DispatchInterface.Name, Attrs: RPCDollar[1].DispatchInterface.Attrs, Body: RPCDollar[3].DispatchInterfaceBody}
			for i := range RPCDollar[3].DispatchInterfaceBody.Methods {
				RPCDollar[3].DispatchInterfaceBody.Methods[i].OpNum = i
			}
		}
	case 31:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:597
		{
			RPCVAL.DispatchInterface = DispatchInterface{Attrs: RPCDollar[1].Attr.DispatchInterface(), Name: RPCDollar[3].Ident}
		}
	case 32:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:603
		{
			RPCVAL.DispatchInterfaceBody = RPCDollar[1].DispatchInterfaceBody
		}
	case 33:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:607
		{
			if len(RPCDollar[2].DispatchInterfaceBody.Properties) > 0 {
				RPCVAL.DispatchInterfaceBody.Properties = append(RPCVAL.DispatchInterfaceBody.Properties, RPCDollar[2].DispatchInterfaceBody.Properties...)
			}
			if len(RPCDollar[2].DispatchInterfaceBody.Methods) > 0 {
				RPCVAL.DispatchInterfaceBody.Methods = append(RPCVAL.DispatchInterfaceBody.Methods, RPCDollar[2].DispatchInterfaceBody.Methods...)
			}
		}
	case 34:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:618
		{
			RPCVAL.DispatchInterfaceBody = DispatchInterfaceBody{Properties: RPCDollar[3].Fields}
		}
	case 35:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:622
		{
			RPCVAL.DispatchInterfaceBody = DispatchInterfaceBody{Methods: RPCDollar[3].Operations}
		}
	case 36:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:628
		{
			RPCVAL.Fields = nil
		}
	case 37:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:632
		{
			RPCVAL.Fields = RPCDollar[1].Fields
		}
	case 38:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:638
		{
			RPCVAL.Operations = []*Operation{RPCDollar[1].Operation}
		}
	case 39:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:642
		{
			RPCVAL.Operations = append(RPCVAL.Operations, RPCDollar[2].Operation)
		}
	case 40:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:648
		{
			RPCVAL.Interface = Interface{Name: RPCDollar[1].Interface.Name, Attrs: RPCDollar[1].Interface.Attrs, Body: RPCDollar[3].InterfaceBody, BaseName: RPCDollar[1].Interface.BaseName}
		}
	case 41:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:652
		{
			RPCVAL.Interface = Interface{Name: RPCDollar[1].Interface.Name, Attrs: RPCDollar[1].Interface.Attrs, BaseName: RPCDollar[1].Interface.BaseName}
		}
	case 42:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:656
		{
			RPCVAL.Interface = Interface{Name: RPCDollar[1].Interface.Name, Attrs: RPCDollar[1].Interface.Attrs, BaseName: RPCDollar[1].Interface.BaseName}
		}
	case 43:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:662
		{
			RPCVAL.Interface = Interface{Attrs: RPCDollar[1].Attr.Interface(), Name: RPCDollar[3].Ident, BaseName: RPCDollar[4].Ident}
		}
	case 44:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:668
		{
			RPCVAL.Ident = ""
		}
	case 45:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:672
		{
			RPCVAL.Ident = RPCDollar[2].Ident
		}
	case 46:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:678
		{
			RPCVAL.Attr = pAttr{}
		}
	case 47:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:682
		{
			RPCVAL.Attr = RPCDollar[1].Attr
		}
	case 48:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:688
		{
			RPCVAL.Attr = RPCDollar[2].Attr
		}
	case 49:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:692
		{
			RPCVAL.Attr = RPCVAL.Attr.Merge(RPCDollar[3].Attr)
		}
	case 50:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:698
		{
			RPCVAL.Attr = RPCVAL.Attr.Set(RPCDollar[1].AttrType)
		}
	case 51:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:702
		{
			RPCVAL.Attr = RPCVAL.Attr.Set(RPCDollar[3].AttrType)
		}
	case 52:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:709
		{
			RPCVAL.AttrType = pAttrType{FIRST_IS, pAttr{FirstIs: RPCDollar[3].Exprs}}
		}
	case 53:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:713
		{
			RPCVAL.AttrType = pAttrType{LAST_IS, pAttr{LastIs: RPCDollar[3].Exprs}}
		}
	case 54:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:717
		{
			RPCVAL.AttrType = pAttrType{LENGTH_IS, pAttr{LengthIs: RPCDollar[3].Exprs}}
		}
	case 55:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:721
		{
			RPCVAL.AttrType = pAttrType{MIN_IS, pAttr{MinIs: RPCDollar[3].Exprs}}
		}
	case 56:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:725
		{
			RPCVAL.AttrType = pAttrType{MAX_IS, pAttr{MaxIs: RPCDollar[3].Exprs}}
		}
	case 57:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:729
		{
			RPCVAL.AttrType = pAttrType{SIZE_IS, pAttr{SizeIs: RPCDollar[3].Exprs}}
		}
	case 58:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:733
		{
			RPCVAL.AttrType = pAttrType{RPCDollar[1].Token, pAttr{}}
		}
	case 59:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:737
		{
			if RPCDollar[3].Expr.Empty() {
				RPCVAL.AttrType = pAttrType{GOEXT_DEFAULT_NULL, pAttr{DefaultNull: []Expr{}}}
			} else {
				RPCVAL.AttrType = pAttrType{GOEXT_DEFAULT_NULL, pAttr{DefaultNull: []Expr{RPCDollar[3].Expr}}}
			}
		}
	case 60:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:745
		{
			RPCVAL.AttrType = pAttrType{RPCDollar[1].Token, pAttr{}}
		}
	case 61:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:749
		{
			RPCVAL.AttrType = pAttrType{RPCDollar[3].Token, pAttr{}}
		}
	case 62:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:753
		{
			RPCVAL.AttrType = RPCDollar[1].AttrType
		}
	case 63:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:757
		{
			RPCVAL.AttrType = pAttrType{IGNORE, pAttr{}}
		}
	case 64:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:761
		{
			RPCVAL.AttrType = RPCDollar[1].AttrType
		}
	case 65:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:765
		{
			RPCVAL.AttrType = pAttrType{TRANSMIT_AS, pAttr{TransmitAs: RPCDollar[3].Type}}
		}
	case 66:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:769
		{
			RPCVAL.AttrType = pAttrType{SWITCH_TYPE, pAttr{SwitchType: RPCDollar[1].Type}}
		}
	case 67:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:773
		{
			RPCVAL.AttrType = pAttrType{HANDLE, pAttr{}}
		}
	case 68:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:777
		{
			RPCVAL.AttrType = pAttrType{IDEMPOTENT, pAttr{}}
		}
	case 69:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:781
		{
			RPCVAL.AttrType = pAttrType{BROADCAST, pAttr{}}
		}
	case 70:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:785
		{
			RPCVAL.AttrType = pAttrType{MAYBE, pAttr{}}
		}
	case 71:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:789
		{
			RPCVAL.AttrType = pAttrType{REFLECT_DELETIONS, pAttr{}}
		}
	case 72:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:793
		{
			RPCVAL.AttrType = pAttrType{UUID, pAttr{UUID: RPCDollar[1].UUID}}
		}
	case 73:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:797
		{
			RPCVAL.AttrType = pAttrType{VERSION, pAttr{Version: RPCDollar[3].Version}}
		}
	case 74:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:801
		{
			RPCVAL.AttrType = pAttrType{ENDPOINT, pAttr{Endpoints: RPCDollar[3].Strings}}
		}
	case 75:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:805
		{
			RPCVAL.AttrType = pAttrType{EXCEPTIONS, pAttr{Exceptions: RPCDollar[3].Strings}}
		}
	case 76:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:809
		{
			RPCVAL.AttrType = pAttrType{LOCAL, pAttr{}}
		}
	case 77:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:813
		{
			switch RPCDollar[3].Token {
			case POINTER_PTR:
				RPCVAL.AttrType = pAttrType{POINTER_DEFAULT, pAttr{PointerDefault: PointerTypePtr}}
			case POINTER_REF:
				RPCVAL.AttrType = pAttrType{POINTER_DEFAULT, pAttr{PointerDefault: PointerTypeRef}}
			case POINTER_UNIQUE:
				RPCVAL.AttrType = pAttrType{POINTER_DEFAULT, pAttr{PointerDefault: PointerTypeUnique}}
			}
		}
	case 78:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:824
		{
			RPCVAL.AttrType = pAttrType{V1_ENUM, pAttr{}}
		}
	case 79:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:828
		{
			RPCVAL.AttrType = pAttrType{MS_UNION, pAttr{}}
		}
	case 80:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:832
		{
			RPCVAL.AttrType = RPCDollar[1].AttrType
		}
	case 81:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:836
		{
			RPCVAL.AttrType = pAttrType{DISABLE_CONSISTENCY_CHECK, pAttr{}}
		}
	case 82:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:840
		{
			RPCVAL.AttrType = pAttrType{OBJECT, pAttr{}}
		}
	case 83:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:844
		{
			RPCVAL.AttrType = pAttrType{CALLBACK, pAttr{}}
		}
	case 84:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:848
		{
			RPCVAL.AttrType = pAttrType{RETVAL, pAttr{}}
		}
	case 85:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:852
		{
			RPCVAL.AttrType = pAttrType{IID_IS, pAttr{IIDIs: RPCDollar[3].Expr}}
		}
	case 86:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:856
		{
			RPCVAL.AttrType = pAttrType{HELP_STRING, pAttr{HelpString: RPCDollar[3].String}}
		}
	case 87:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:860
		{
			RPCVAL.AttrType = pAttrType{DUAL, pAttr{}}
		}
	case 88:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:864
		{
			RPCVAL.AttrType = pAttrType{PROPGET, pAttr{}}
		}
	case 89:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:868
		{
			RPCVAL.AttrType = pAttrType{PROPPUT, pAttr{}}
		}
	case 90:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:872
		{
			RPCVAL.AttrType = pAttrType{PROPPUTREF, pAttr{}}
		}
	case 91:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:876
		{
			val, ok := RPCDollar[3].Expr.Eval(RPClex.(ExprStore))
			if !ok {
				RPClex.Error("cannot eval ID expression")
				return 0
			}
			if _, ok = val.BigInt(); !ok {
				RPClex.Error("cannot eval ID expression")
				return 0
			}
			RPCVAL.AttrType = pAttrType{ID, pAttr{ID: val}}
		}
	case 92:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:889
		{
			RPCVAL.AttrType = pAttrType{HIDDEN, pAttr{}}
		}
	case 93:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:893
		{
			RPCVAL.AttrType = pAttrType{NONEXTENSIBLE, pAttr{}}
		}
	case 94:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:897
		{
			RPCVAL.AttrType = pAttrType{RESTRICTED, pAttr{}}
		}
	case 95:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:901
		{
			exp, ok := RPCDollar[3].Expr.Eval(RPClex.(ExprStore))
			if !ok {
				RPClex.Error("cannot evaluate default value")
				return 0
			}
			RPCVAL.AttrType = pAttrType{DEFAULT_VALUE, pAttr{DefaultValue: exp}}
		}
	case 96:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:910
		{
			RPCVAL.AttrType = pAttrType{ODL, pAttr{}}
		}
	case 97:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:914
		{
			RPCVAL.AttrType = pAttrType{OLEAUTOMATION, pAttr{}}
		}
	case 98:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:918
		{
			RPCVAL.AttrType = pAttrType{OPTIONAL, pAttr{}}
		}
	case 99:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:922
		{
			RPCVAL.AttrType = pAttrType{APPOBJECT, pAttr{}}
		}
	case 100:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:926
		{
			RPCVAL.AttrType = pAttrType{ANNOTATION, pAttr{Annotation: RPCDollar[3].String}}
		}
	case 101:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:930
		{
			RPCVAL.AttrType = pAttrType{CALL_AS, pAttr{CallAs: RPCDollar[3].Ident}}
		}
	case 102:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:934
		{
			RPCVAL.AttrType = pAttrType{WIRE_MARSHAL, pAttr{WireMarshal: RPCDollar[3].Ident}}
		}
	case 103:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:938
		{
			RPCVAL.AttrType = pAttrType{PUBLIC, pAttr{}}
		}
	case 104:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:942
		{
			RPCVAL.AttrType = pAttrType{SAFEARRAY, pAttr{Safearray: RPCDollar[3].Type}}
		}
	case 105:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:946
		{
			RPCVAL.AttrType = pAttrType{PAD, pAttr{Pad: RPCDollar[3].Int.Uint64()}}
		}
	case 106:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:950
		{
			for i := range RPCDollar[3].Fields {
				RPCDollar[3].Fields[i].Attrs.IsLayout = true
			}
			RPCVAL.AttrType = pAttrType{GOEXT_LAYOUT, pAttr{Layout: RPCDollar[3].Fields}}
		}
	case 107:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:957
		{
			RPCVAL.AttrType = pAttrType{GOEXT_NO_SIZE_LIMIT, pAttr{NoSizeLimit: true}}
		}
	case 108:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:963
		{
			RPCVAL.Version = &Version{Major: uint16(RPCDollar[1].Int.Uint64())}
		}
	case 109:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:967
		{
			RPCVAL.Version = &Version{Major: uint16(RPCDollar[1].Int.Uint64()), Minor: uint16(RPCDollar[3].Int.Uint64())}
		}
	case 110:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:973
		{
			RPCVAL.Strings = []string{RPCDollar[1].String}
		}
	case 111:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:977
		{
			RPCVAL.Strings = append(RPCVAL.Strings, RPCDollar[3].String)
		}
	case 112:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:983
		{
			RPCVAL.Strings = []string{RPCDollar[1].String}
		}
	case 113:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:987
		{
			RPCVAL.Strings = append(RPCVAL.Strings, RPCDollar[3].String)
		}
	case 114:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:993
		{
			RPCVAL.String = RPCDollar[1].String
		}
	case 115:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:999
		{
			RPCVAL.String = RPCDollar[1].Ident
		}
	case 116:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1005
		{
			RPCVAL.InterfaceBody = InterfaceBody{Imports: RPCDollar[1].Strings, Export: RPCDollar[2].InterfaceBody.Export, Operations: RPCDollar[2].InterfaceBody.Operations}
			for i, o := range RPCVAL.InterfaceBody.Operations {
				o.OpNum = i
			}
		}
	case 117:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1014
		{
			RPCVAL.InterfaceBody = RPCDollar[1].InterfaceBody
			export := make([]*Export, len(RPCDollar[1].InterfaceBody.Export))
			for _, e := range RPCDollar[1].InterfaceBody.Export {
				export[e.Position] = e
			}
			for _, e := range export {
				exportSyms(RPClex, e.Name, e)
			}
		}
	case 118:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1025
		{
			if len(RPCDollar[2].InterfaceBody.Export) > 0 {
				if RPCVAL.InterfaceBody.Export == nil {
					RPCVAL.InterfaceBody.Export = make(map[string]*Export)
				}
				export := make([]*Export, len(RPCDollar[2].InterfaceBody.Export))
				for _, e := range RPCDollar[2].InterfaceBody.Export {
					export[e.Position] = e
				}
				for _, e := range export {
					RPCVAL.InterfaceBody.Export[e.Name] = e
					exportSyms(RPClex, e.Name, e)
				}
			}
			if len(RPCDollar[2].InterfaceBody.Operations) > 0 {
				RPCVAL.InterfaceBody.Operations = append(RPCVAL.InterfaceBody.Operations, RPCDollar[2].InterfaceBody.Operations...)
			}
		}
	case 119:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:1046
		{
			RPCVAL.Strings = []string{}
		}
	case 120:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1050
		{
			RPCVAL.Strings = RPCDollar[1].Strings
		}
	case 121:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1056
		{
			RPCVAL.Strings = RPCDollar[2].Strings
			// XXX: load import files.
			for _, f := range RPCDollar[2].Strings {
				if _, err := NewFile(f, "").Load(); err != nil {
					RPClex.Error("unable to load file: " + err.Error())
					return 0
				}
			}
		}
	case 122:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1068
		{
			RPCVAL.InterfaceBody = InterfaceBody{Export: make(map[string]*Export)}
			for _, e := range RPCDollar[1].Export {
				RPCVAL.InterfaceBody.Export[e.Name], e.Position = e, len(RPCVAL.InterfaceBody.Export)

			}
		}
	case 123:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1076
		{
			RPCVAL.InterfaceBody = InterfaceBody{Operations: []*Operation{RPCDollar[1].Operation}}
		}
	case 124:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1082
		{
			RPCVAL.Export = RPCDollar[1].Typedef.pToExport_()
		}
	case 125:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1086
		{
			RPCVAL.Export = []*Export{&Export{Name: RPCDollar[1].Const.Name, Const: RPCDollar[1].Const}}
		}
	case 126:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1090
		{
			RPCVAL.Export = RPCDollar[1].Export
		}
	case 127:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1094
		{
			RPCVAL.Export = []*Export{&Export{Name: RPCDollar[1].Type.TypeName(), Type: RPCDollar[1].Type}}
		}
	case 128:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1100
		{
			RPCVAL.Strings = []string{RPCDollar[1].String}
		}
	case 129:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1104
		{
			RPCVAL.Strings = append(RPCVAL.Strings, RPCDollar[3].String)
		}
	case 130:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1110
		{
			RPCVAL.String = RPCDollar[1].String
		}
	case 131:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:1116
		{
			exp, err := RPCDollar[5].Expr.Coerce(RPCDollar[2].Kind)
			if err != nil {
				RPClex.Error(err.Error())
				return 0
			}
			RPCVAL.Const = &Const{Type: RPCDollar[2].Kind, Name: RPCDollar[3].Ident, Value: exp}
		}
	case 132:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1127
		{
			switch v := RPCDollar[3].Expr.Value.(type) {
			case *big.Int:
				RPCVAL.Export = []*Export{&Export{Name: RPCDollar[2].Ident, Const: &Const{Type: TypeInt64, Name: RPCDollar[2].Ident, Value: RPCDollar[3].Expr}}}
			case string:
				if RPCDollar[3].Expr.CanEval() {
					RPCVAL.Export = []*Export{&Export{Name: RPCDollar[2].Ident, Const: &Const{Type: TypeString, Name: RPCDollar[2].Ident, Value: RPCDollar[3].Expr}}}
					break
				}
				ref := &Type{Kind: TypeRef, Name: v}
				decl := &Type{Kind: TypeAttribute, Attrs: &TypeAttr{Alias: RPCDollar[2].Ident}}
				typ, ok := lookupType(RPClex, ref.Name)
				if !ok {
					// XXX: defer type resolution.
					decl.Elem = pushRef(RPClex, ref)
				} else {
					decl.Elem = typ
				}

				RPCVAL.Export = []*Export{&Export{Name: RPCDollar[2].Ident, Type: decl}}

				// FIXME: dnsp.idl PRAGMA Types.
				// $$ = []*Export{&Export{Name: $2, Type: &Type{Kind: TypeRef, Name: v}}}
			default:
				RPClex.Error("invalid #define statement")
				return 0
			}
		}
	case 133:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:1156
		{
			// XXX: re-enter the STRING_LITERAL as PRAGMA_DEFINE.
			pushLex(RPClex, RPCDollar[3].String)
		}
	case 134:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1163
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 135:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1167
		{
			typ, ok := lookupType(RPClex, RPCDollar[1].Ident)
			if !ok {
				RPClex.Error("cannot lookup type " + RPCDollar[1].Ident)
				return 0
			}

			switch typ = typ.Base(); typ.Kind {
			case TypeChar,
				TypeUChar,
				TypeWChar,
				TypeBoolean,
				TypeInt8,
				TypeUint8,
				TypeInt16,
				TypeUint16,
				TypeInt32,
				TypeUint32,
				TypeInt32_64,
				TypeUint32_64,
				TypeInt64,
				TypeUint64,
				TypeVoid,
				TypeString,
				// FIXME: float, double not expected but used.
				TypeFloat32,
				TypeFloat64:
				RPCVAL.Kind = typ.Kind
			default:
				RPClex.Error("invalid const type " + RPCDollar[1].Ident)
				return 0
			}
		}
	case 136:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1201
		{
			RPCVAL.Kind = TypeChar
		}
	case 137:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1205
		{
			RPCVAL.Kind = TypeUChar
		}
	case 138:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1209
		{
			RPCVAL.Kind = TypeBoolean
		}
	case 139:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1213
		{
			RPCVAL.Kind = TypeVoid
		}
	case 140:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1217
		{
			RPCVAL.Kind = TypeString
		}
	case 141:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1223
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 142:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1227
		{
			RPCVAL.Expr = NewValue(RPCDollar[1].String)
		}
	case 143:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1231
		{
			RPCVAL.Expr = NewValue(RPCDollar[1].Char)
		}
	case 144:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1235
		{
			RPCVAL.Expr = NewValue(nil)
		}
	case 145:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1239
		{
			RPCVAL.Expr = NewValue(true)
		}
	case 146:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1243
		{
			RPCVAL.Expr = NewValue(false)
		}
	case 147:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1249
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 148:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1255
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 149:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:1259
		{
			exp, ok := RPCDollar[1].Expr.Ter(RPCDollar[3].Expr, RPCDollar[5].Expr)
			if !ok {
				RPClex.Error("cannot evaluate ternary expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 150:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1270
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 151:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1274
		{
			exp, ok := RPCDollar[1].Expr.LogicalOr(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate l-or expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 152:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1285
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 153:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1289
		{
			exp, ok := RPCDollar[1].Expr.LogicalAnd(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate l-and expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 154:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1300
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 155:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1304
		{
			exp, ok := RPCDollar[1].Expr.Or(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate or expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 156:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1315
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 157:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1319
		{
			exp, ok := RPCDollar[1].Expr.Xor(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate xor expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 158:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1330
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 159:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1334
		{
			exp, ok := RPCDollar[1].Expr.And(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate and expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 160:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1345
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 161:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1349
		{
			exp, ok := RPCDollar[1].Expr.Eq(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate eq expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 162:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1358
		{
			exp, ok := RPCDollar[1].Expr.Ne(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate ne expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 163:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1369
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 164:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1373
		{
			exp, ok := RPCDollar[1].Expr.Lt(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate lt expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 165:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1382
		{
			exp, ok := RPCDollar[1].Expr.Gt(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate gt expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 166:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1391
		{
			exp, ok := RPCDollar[1].Expr.Le(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate le expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 167:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1400
		{
			exp, ok := RPCDollar[1].Expr.Ge(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate ge expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 168:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1411
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 169:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1415
		{
			exp, ok := RPCDollar[1].Expr.Lsh(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate lsh expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 170:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1424
		{
			exp, ok := RPCDollar[1].Expr.Rsh(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate rsh expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 171:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1435
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 172:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1439
		{
			exp, ok := RPCDollar[1].Expr.Sub(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate sub expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 173:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1448
		{
			exp, ok := RPCDollar[1].Expr.Add(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate add expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 174:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1459
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 175:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1463
		{
			exp, ok := RPCDollar[1].Expr.Mul(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate mul expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 176:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1472
		{
			exp, ok := RPCDollar[1].Expr.Div(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate div expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 177:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1481
		{
			exp, ok := RPCDollar[1].Expr.Rem(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate rem expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 178:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1492
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 179:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1496
		{
			exp, ok := RPCDollar[2].Expr.Positive()
			if !ok {
				RPClex.Error("cannot evaluate u'+' expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 180:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1505
		{
			exp, ok := RPCDollar[2].Expr.Negative()
			if !ok {
				RPClex.Error("cannot evaluate u'-' expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 181:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1514
		{
			exp, ok := RPCDollar[2].Expr.Neg()
			if !ok {
				RPClex.Error("cannot evaluate u'~' expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 182:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1523
		{
			exp, ok := RPCDollar[2].Expr.Not()
			if !ok {
				RPClex.Error("cannot evaluate u'!' expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 183:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1534
		{
			RPCVAL.Expr = NewValue(RPCDollar[1].Int)
		}
	case 184:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:1538
		{
			sz := TypeSize(RPClex.(TypeStore), RPCDollar[3].Type)
			if sz == 0 {
				RPClex.Error(fmt.Sprintf("cannot determine size of type: %s (%s)", RPCDollar[3].Type.Name, RPCDollar[3].Type.Kind))
				return 0
			}
			RPCVAL.Expr = NewValue(big.NewInt(int64(sz)))
		}
	case 185:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1547
		{
			if c, ok := lookupConst(RPClex, RPCDollar[1].Ident); !ok {
				RPCVAL.Expr = NewIdent(RPCDollar[1].Ident)
			} else {
				RPCVAL.Expr = c.Value
			}
		}
	case 186:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1555
		{
			exp, ok := NewIdent(RPCDollar[2].Ident).Ptr()
			if !ok {
				RPClex.Error("cannot evaluate ptr expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 187:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1564
		{
			RPCVAL.Expr = RPCDollar[2].Expr
		}
	case 188:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:1570
		{
			attrs := RPCDollar[1].Attr.Merge(RPCDollar[3].Attr).Type()
			if attrs.Usage.ContextHandle {
				ref := &Type{Kind: TypeRef, Name: "ndr_context_handle"}
				typ, ok := lookupType(RPClex, ref.Name)
				if !ok {
					// XXX: defer type resolution.
					RPClex.Error("ndr_context_handle not found")
					break
				}
				RPCDollar[4].Type = typ
			}

			RPCVAL.Typedef = &pTypedef{Type: RPCDollar[4].Type, Attrs: attrs, Declarators: RPCDollar[5].Declarators}
		}
	case 189:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1588
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 190:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1592
		{
			RPCVAL.Type = RPCDollar[2].Type
		}
	case 191:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1596
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 192:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1600
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 193:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1606
		{
			RPCVAL.Type = &Type{Kind: RPCDollar[1].Kind}
		}
	case 194:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1610
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 195:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1614
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 196:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1620
		{
			ref := &Type{Kind: TypeRef, Name: RPCDollar[1].Ident}
			typ, ok := lookupType(RPClex, ref.Name)
			if !ok {
				// XXX: defer type resolution.
				RPCVAL.Type = pushRef(RPClex, ref)
			} else {
				RPCVAL.Type = typ
			}
		}
	case 197:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1634
		{
			RPCVAL.Declarators = pDeclarators{RPCDollar[1].Declarator}
		}
	case 198:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1638
		{
			RPCVAL.Declarators = append(RPCVAL.Declarators, RPCDollar[3].Declarator)
		}
	case 199:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:1643
		{
			RPCVAL.Declarators = pDeclarators{&pDeclarator{Name: ""}}
		}
	case 200:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1649
		{
			RPCVAL.Declarator = RPCDollar[2].Declarator
			for i := 0; i < int(RPCDollar[1].Int64); i++ {
				RPCVAL.Declarator = &pDeclarator{Name: RPCVAL.Declarator.Name, Type: &Type{Kind: TypePointer, Elem: RPCVAL.Declarator.Type}}
			}
		}
	case 201:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1658
		{
			RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].String}
		}
	case 202:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1662
		{
			RPCVAL.Declarator = RPCDollar[2].Declarator
		}
	case 203:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1666
		{
			RPCVAL.Declarator = RPCDollar[1].Declarator
		}
	case 204:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1670
		{
			RPCVAL.Declarator = RPCDollar[1].Declarator
		}
	case 205:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1676
		{
			RPCVAL.String = RPCDollar[1].Ident
		}
	case 206:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1680
		{
			ident, ok := tokName(RPClex, RPCrcvr.char)
			if !ok {
				return 0
			}
			RPCVAL.String = ident
		}
	case 207:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1690
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 208:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1694
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 209:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1699
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 210:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1713
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 211:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1717
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 212:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1721
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 213:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1725
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 214:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1729
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 215:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1733
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 216:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1737
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 217:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1742
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 218:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1749
		{
			RPCVAL.Kind = TypeFloat32
		}
	case 219:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1753
		{
			RPCVAL.Kind = TypeFloat64
		}
	case 220:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1759
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 221:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1763
		{
			switch RPCDollar[2].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint64
			default:
				RPCVAL.Kind = TypeInt64
			}
		}
	case 222:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1772
		{
			RPCVAL.Kind = TypeUint64
		}
	case 223:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1778
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 224:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1782
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 225:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1786
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 226:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1792
		{
			switch RPCDollar[2].Token {
			case LONG:
				RPCVAL.Kind = TypeInt32
			case SHORT:
				RPCVAL.Kind = TypeInt16
			case SMALL:
				RPCVAL.Kind = TypeInt8
			}
		}
	case 227:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1803
		{
			switch RPCDollar[1].Token {
			case LONG:
				RPCVAL.Kind = TypeInt32
			case SHORT:
				RPCVAL.Kind = TypeInt16
			case SMALL:
				RPCVAL.Kind = TypeInt8
			}
		}
	case 228:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1816
		{
			switch RPCDollar[1].Token {
			case LONG:
				RPCVAL.Kind = TypeUint32
			case SHORT:
				RPCVAL.Kind = TypeUint16
			case SMALL:
				RPCVAL.Kind = TypeUint8
			}
		}
	case 229:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1827
		{
			switch RPCDollar[2].Token {
			case LONG:
				RPCVAL.Kind = TypeUint32
			case SHORT:
				RPCVAL.Kind = TypeUint16
			case SMALL:
				RPCVAL.Kind = TypeUint8
			}
		}
	case 230:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1841
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint32
			default:
				RPCVAL.Kind = TypeInt32
			}
		}
	case 231:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1850
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint8
			default:
				RPCVAL.Kind = TypeInt8
			}
		}
	case 232:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1859
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint16
			default:
				RPCVAL.Kind = TypeInt16
			}
		}
	case 233:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1868
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint32
			default:
				RPCVAL.Kind = TypeInt32
			}
		}
	case 234:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1877
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint32_64
			default:
				RPCVAL.Kind = TypeInt32_64
			}
		}
	case 235:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1886
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint64
			default:
				RPCVAL.Kind = TypeInt64
			}
		}
	case 236:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1898
		{
			RPCVAL.Token = LONG
		}
	case 237:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1902
		{
			RPCVAL.Token = SHORT
		}
	case 238:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1906
		{
			RPCVAL.Token = SMALL
		}
	case 239:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1912
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUChar
			default:
				RPCVAL.Kind = TypeChar
			}
		}
	case 240:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1924
		{
			RPCVAL.Kind = TypeWChar
		}
	case 241:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1931
		{
			RPCVAL.Kind = TypeBoolean
		}
	case 242:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1937
		{
			RPCVAL.Kind = TypeUint8
		}
	case 243:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1943
		{
			RPCVAL.Kind = TypeVoid
		}
	case 244:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1949
		{
			RPCVAL.Kind = TypeHandle
		}
	case 245:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:1955
		{
			RPCVAL.Token = 0
		}
	case 246:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1959
		{
			RPCVAL.Token = UNSIGNED
		}
	case 247:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:1965
		{
			RPCVAL.Token = 0
		}
	case 248:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1969
		{
			RPCVAL.Token = UNSIGNED
		}
	case 249:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1973
		{
			RPCVAL.Token = 0
		}
	case 254:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1988
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 255:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1992
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 256:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1996
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 257:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2000
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 258:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2004
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 259:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2010
		{
			ref := &Type{Kind: TypeRef, Name: "_struct_" + RPCDollar[2].String}
			typ, ok := lookupType(RPClex, ref.Name)
			if !ok {
				// XXX: defer type resolution.
				RPCVAL.Type = pushRef(RPClex, ref)
			} else {
				RPCVAL.Type = typ
			}
		}
	case 260:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2021
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 261:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2027
		{
			for i := range RPCDollar[3].Fields {
				RPCDollar[3].Fields[i].Position = i + 1
			}
			// XXX: set proper switch type if not specified.
			SetSwitchType(RPCDollar[3].Fields)
			RPCVAL.Type = &Type{Kind: TypeStruct, Struct: &Struct{Fields: RPCDollar[3].Fields}}
		}
	case 262:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2038
		{
			for i := range RPCDollar[4].Fields {
				RPCDollar[4].Fields[i].Position = i + 1
			}
			// XXX: set proper switch type if not specified.
			SetSwitchType(RPCDollar[4].Fields)
			RPCVAL.Type = &Type{Kind: TypeStruct, Tag: RPCDollar[2].String, Struct: &Struct{Fields: RPCDollar[4].Fields}}
		}
	case 263:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2049
		{
			RPCVAL.String = RPCDollar[1].Ident
		}
	case 264:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2055
		{
			RPCVAL.Fields = RPCDollar[1].Fields
		}
	case 265:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2059
		{
			RPCVAL.Fields = append(RPCVAL.Fields, RPCDollar[2].Fields...)
		}
	case 266:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2065
		{
			RPCVAL.Fields = RPCDollar[1].Fields
		}
	case 267:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2071
		{
			RPCVAL.Fields = make([]*Field, 0, len(RPCDollar[3].Declarators))
			for _, decl := range RPCDollar[3].Declarators {
				decl.Type = decl.Type.Append(RPCDollar[2].Type)
				RPCVAL.Fields = append(RPCVAL.Fields, &Field{Attrs: RPCDollar[1].Attr.Field(), Name: decl.Name, Type: decl.Type, DefaultValue: RPCDollar[4].Expr})
			}

		}
	case 268:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2082
		{
			RPCVAL.Expr = Expr{}
		}
	case 269:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2086
		{
			RPCVAL.Expr = RPCDollar[2].Expr
		}
	case 270:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2092
		{
			RPCVAL.Type = &Type{Kind: TypeUnion, Tag: RPCDollar[2].String}
		}
	case 271:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2096
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 272:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2102
		{
			pos := 1
			for i := range RPCDollar[5].UnionCases {
				for j := range RPCDollar[5].UnionCases[i].Arms {
					RPCDollar[5].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeUnion, Name: RPCDollar[3].String, Union: &Union{Switch: RPCDollar[2].UnionSwitch, Body: RPCDollar[5].UnionCases}}
		}
	case 273:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2113
		{
			pos := 1
			for i := range RPCDollar[3].UnionCases {
				for j := range RPCDollar[3].UnionCases[i].Arms {
					RPCDollar[3].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeUnion, Union: &Union{Body: RPCDollar[3].UnionCases}}
		}
	case 274:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2124
		{
			pos := 1
			for i := range RPCDollar[3].UnionCases {
				for j := range RPCDollar[3].UnionCases[i].Arms {
					RPCDollar[3].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeCUnion, Union: &Union{Body: RPCDollar[3].UnionCases}}
		}
	case 275:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2137
		{
			RPCVAL.UnionSwitch = &UnionSwitch{Type: RPCDollar[3].Type, Name: RPCDollar[4].Ident}
		}
	case 276:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2143
		{
			RPCVAL.Type = &Type{Kind: RPCDollar[1].Kind}
		}
	case 277:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2147
		{
			RPCVAL.Type = &Type{Kind: RPCDollar[1].Kind}
		}
	case 278:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2151
		{
			RPCVAL.Type = &Type{Kind: RPCDollar[1].Kind}
		}
	case 279:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2155
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 280:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2160
		{
			ref := &Type{Kind: TypeRef, Name: "_enum_" + RPCDollar[2].String}
			typ, ok := lookupType(RPClex, ref.Name)
			if !ok {
				// XXX: defer type resolution.
				RPCVAL.Type = pushRef(RPClex, ref)
			} else {
				RPCVAL.Type = typ
			}
		}
	case 281:
		RPCDollar = RPCS[RPCpt-7 : RPCpt+1]
//line midl/parse.y:2173
		{
			pos := 1
			for i := range RPCDollar[6].UnionCases {
				for j := range RPCDollar[6].UnionCases[i].Arms {
					RPCDollar[6].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeUnion, Tag: RPCDollar[2].String, Union: &Union{Switch: RPCDollar[3].UnionSwitch, Body: RPCDollar[6].UnionCases}}
		}
	case 282:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2184
		{
			pos := 1
			for i := range RPCDollar[4].UnionCases {
				for j := range RPCDollar[4].UnionCases[i].Arms {
					RPCDollar[4].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeUnion, Tag: RPCDollar[2].String, Union: &Union{Body: RPCDollar[4].UnionCases}}
		}
	case 283:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2195
		{
			pos := 1
			for i := range RPCDollar[4].UnionCases {
				for j := range RPCDollar[4].UnionCases[i].Arms {
					RPCDollar[4].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeCUnion, Tag: RPCDollar[2].String, Union: &Union{Body: RPCDollar[4].UnionCases}}
		}
	case 284:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2208
		{
			// In encapsulated unions, if the <union_name> is
			// omitted, the union is assigned the name tagged_union
			// in the generated header source.
			RPCVAL.String = "tagged_union"
		}
	case 285:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2215
		{
			RPCVAL.String = RPCDollar[1].Ident
		}
	case 286:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2221
		{
			RPCVAL.UnionCases = []*UnionCase{RPCDollar[1].UnionCase}
		}
	case 287:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2225
		{
			RPCVAL.UnionCases = append(RPCVAL.UnionCases, RPCDollar[2].UnionCase)
		}
	case 288:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2231
		{
			RPCVAL.UnionCases = []*UnionCase{&UnionCase{Arms: RPCDollar[1].Fields}}
		}
	case 289:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2235
		{
			RPCVAL.UnionCases = append(RPCVAL.UnionCases, &UnionCase{Arms: RPCDollar[2].Fields})
		}
	case 290:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2241
		{
			RPCVAL.UnionCases = []*UnionCase{RPCDollar[1].UnionCase}
		}
	case 291:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2245
		{
			RPCVAL.UnionCases = append(RPCVAL.UnionCases, RPCDollar[2].UnionCase)
		}
	case 292:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2251
		{
			labels := make([]interface{}, 0, len(RPCDollar[1].Exprs))
			for _, label := range RPCDollar[1].Exprs {
				labels = append(labels, label)
			}
			RPCVAL.UnionCase = &UnionCase{Labels: labels, Arms: RPCDollar[2].Fields}
		}
	case 293:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2259
		{
			RPCVAL.UnionCase = &UnionCase{Arms: RPCDollar[1].Fields, IsDefault: true}
		}
	case 294:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2265
		{
			RPCVAL.Exprs = RPCDollar[1].Exprs
		}
	case 295:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2269
		{
			RPCVAL.Exprs = append(RPCVAL.Exprs, RPCDollar[2].Exprs...)
		}
	case 296:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2275
		{
			labels := make([]interface{}, 0, len(RPCDollar[1].Exprs))
			for _, label := range RPCDollar[1].Exprs {
				labels = append(labels, label)
			}
			RPCVAL.UnionCase = &UnionCase{Labels: labels, Arms: RPCDollar[2].Fields}
		}
	case 297:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2283
		{
			RPCVAL.UnionCase = &UnionCase{Labels: nil, Arms: RPCDollar[1].Fields, IsDefault: true}
		}
	case 298:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2289
		{
			RPCVAL.Exprs = Exprs{RPCDollar[2].Expr}
		}
	case 299:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2295
		{
			RPCVAL.Exprs = RPCDollar[4].Exprs
		}
	case 300:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2301
		{
			RPCVAL.Exprs = Exprs{RPCDollar[1].Expr}
		}
	case 301:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2305
		{
			RPCVAL.Exprs = append(RPCVAL.Exprs, RPCDollar[3].Expr)
		}
	case 302:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2312
		{
			RPCVAL.Fields = RPCDollar[3].Fields
		}
	case 303:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2318
		{
			RPCVAL.Fields = RPCDollar[4].Fields
		}
	case 304:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2324
		{
			RPCVAL.Fields = nil
		}
	case 305:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2328
		{
			for i := range RPCDollar[1].Fields {
				RPCDollar[1].Fields[i].Position = i + 1
			}
			RPCVAL.Fields = RPCDollar[1].Fields
		}
	case 306:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2337
		{
			RPCVAL.Type = RPCDollar[3].Type
		}
	case 307:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2343
		{
			RPCVAL.AttrType = pAttrType{SWITCH_IS, pAttr{SwitchIs: RPCDollar[3].Expr}}
		}
	case 308:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2349
		{
			RPCVAL.Type = &Type{Kind: TypeEnum, Enum: &Enum{Elems: make([]*Element, 0, len(RPCDollar[3].TagIDs))}}
			for idx, i := 0, 0; i < len(RPCDollar[3].TagIDs); i, idx = i+1, idx+1 {
				tag, exp := RPCDollar[3].TagIDs[i].Tag, RPCDollar[3].TagIDs[i].ID
				if !exp.Empty() {
					val, ok := exp.Eval(RPClex.(ExprStore))
					if !ok {
						RPClex.Error("cannot evaluate tag-id expression")
						return 0
					}
					bi, ok := val.BigInt()
					if !ok {
						RPClex.Error("enum: not an integer type")
						return 0
					}
					idx, exp = int(bi.Uint64()), val
				} else {
					exp = NewValue(big.NewInt(int64(idx)))
				}
				if uint32(uint16(idx)) != uint32(idx) {
					RPCVAL.Type.Enum.Is32 = true
				}
				RPCVAL.Type.Enum.Elems = append(RPCVAL.Type.Enum.Elems, &Element{tag, idx})
				storeConst(RPClex, tag, exp)
			}
		}
	case 309:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2379
		{
			RPCVAL.Type = &Type{Kind: TypeEnum, Tag: RPCDollar[2].String}
		}
	case 310:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2383
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 311:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2389
		{
			RPCVAL.Type = &Type{Kind: TypeEnum, Tag: RPCDollar[2].String, Enum: &Enum{Elems: make([]*Element, 0, len(RPCDollar[4].TagIDs))}}
			for idx, i := 0, 0; i < len(RPCDollar[4].TagIDs); i, idx = i+1, idx+1 {
				tag, exp := RPCDollar[4].TagIDs[i].Tag, RPCDollar[4].TagIDs[i].ID
				if !exp.Empty() {
					val, ok := exp.Eval(RPClex.(ExprStore))
					if !ok {
						RPClex.Error("cannot evaluate tag-id expression")
						return 0
					}
					bi, ok := val.BigInt()
					if !ok {
						RPClex.Error("enum: not an integer type")
						return 0
					}
					idx, exp = int(bi.Uint64()), val
				} else {
					exp = NewValue(big.NewInt(int64(idx)))
				}
				if uint32(uint16(idx)) != uint32(idx) {
					RPCVAL.Type.Enum.Is32 = true
				}
				RPCVAL.Type.Enum.Elems = append(RPCVAL.Type.Enum.Elems, &Element{tag, idx})
				storeConst(RPClex, tag, exp)
			}
		}
	case 312:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2419
		{
			RPCVAL.TagIDs = pTagIDs{RPCDollar[1].TagID}
		}
	case 313:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2423
		{
			RPCVAL.TagIDs = append(RPCVAL.TagIDs, RPCDollar[3].TagID)
		}
	case 316:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2433
		{
			RPCVAL.TagID = pTagID{Tag: RPCDollar[1].Ident}
		}
	case 317:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2438
		{
			RPCVAL.TagID = pTagID{Tag: RPCDollar[1].Ident, ID: RPCDollar[3].Expr}
		}
	case 318:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2445
		{
			RPCVAL.Type = &Type{Kind: TypePipe, Elem: RPCDollar[2].Type}
		}
	case 319:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2451
		{

			// XXX: array associativity is different from pointer.
			// so we need to find last array in the chain and insert
			// new array right after it (as it's element).

			array := &Type{Kind: TypeArray, Array: &Array{Bound: RPCDollar[3].ArrayBound}, Elem: RPCDollar[1].Declarator.Type}
			if RPCDollar[1].Declarator.Type == nil || RPCDollar[1].Declarator.Type.Kind != TypeArray {
				RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].Declarator.Name, Type: array}
				break
			}

			last := RPCDollar[1].Declarator.Type
			// shift to the last array in the element chain.
			for last.Elem != nil && last.Elem.Kind == TypeArray {
				last = last.Elem
			}

			// insert array after last array and acuqire
			// the last array's element.
			array.Elem, last.Elem = last.Elem, array
			RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].Declarator.Name, Type: RPCDollar[1].Declarator.Type}
		}
	case 320:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2477
		{
			RPCVAL.ArrayBound = ArrayBound{Lower: 0, Upper: -1}
		}
	case 321:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2481
		{
			if RPCDollar[1].Int.Int64() == -1 {
				RPCVAL.ArrayBound = ArrayBound{Lower: -1, Upper: 0}
			} else {
				RPCVAL.ArrayBound = ArrayBound{Lower: 0, Upper: RPCDollar[1].Int.Int64() - 1}
			}

		}
	case 322:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2490
		{
			RPCVAL.ArrayBound = RPCDollar[1].ArrayBound
		}
	case 323:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2496
		{
			RPCVAL.ArrayBound = ArrayBound{Lower: RPCDollar[1].Int.Int64(), Upper: RPCDollar[3].Int.Int64()}
		}
	case 324:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2502
		{
			RPCVAL.Int = big.NewInt(-1)
		}
	case 325:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2506
		{
			if !RPCDollar[1].Expr.CanEval() {
				RPClex.Error("cannot evaluate integer bound")
				return 0
			}
			val, ok := RPCDollar[1].Expr.BigInt()
			if !ok {
				RPClex.Error("cannot use non-integer as a bound declarator")
				return 0
			}
			RPCVAL.Int = val
		}
	case 326:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2521
		{
			RPCVAL.Token = USAGE_STRING
		}
	case 327:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2525
		{
			RPCVAL.Token = USAGE_CONTEXT_HANDLE
		}
	case 328:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2531
		{
			RPCVAL.Token = FORMAT_UTF8
		}
	case 329:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2535
		{
			RPCVAL.Token = FORMAT_NULL_TERMINATED
		}
	case 330:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2539
		{
			RPCVAL.Token = FORMAT_MULTI_SIZE
		}
	case 331:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2543
		{
			RPCVAL.Token = FORMAT_RUNE
		}
	case 332:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2547
		{
			RPCVAL.Token = FORMAT_HEX
		}
	case 333:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2553
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 334:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2559
		{
			RPCVAL.AttrType = pAttrType{RANGE, pAttr{Range: RPCDollar[2].Range}}
		}
	case 335:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2565
		{
			if !CanEval(RPCDollar[2].Expr, RPCDollar[4].Expr) {
				RPClex.Error("cannot evaluate range declaration")
				return 0
			}
			min, ok := RPCDollar[2].Expr.BigInt()
			if !ok {
				RPClex.Error("invalid min value for range declarator")
				return 0
			}
			max, ok := RPCDollar[4].Expr.BigInt()
			if !ok {
				RPClex.Error("invalid max value for range declarator")
				return 0
			}
			RPCVAL.Range = &Range{Min: min.Int64(), Max: max.Int64()}
		}
	case 336:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2586
		{
			RPCVAL.Exprs = []Expr{RPCDollar[1].Expr}
		}
	case 337:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2590
		{
			// see https://learn.microsoft.com/en-us/windows/win32/rpc/multiple-levels-of-pointers
			// for (,Size) constructions.
			RPCVAL.Exprs = append(RPCVAL.Exprs, RPCDollar[3].Expr)
		}
	case 338:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2598
		{
			RPCVAL.Expr = Expr{}
		}
	case 339:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2602
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 340:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2608
		{
			RPCVAL.Int64 = 0
		}
	case 341:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2612
		{
			RPCVAL.Int64 = RPCDollar[1].Int64
		}
	case 342:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2618
		{
			RPCVAL.Int64++
		}
	case 343:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2622
		{
			RPCVAL.Int64++
		}
	case 344:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2632
		{
			RPCVAL.Token = POINTER_REF
		}
	case 345:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2636
		{
			RPCVAL.Token = POINTER_UNIQUE
		}
	case 346:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2640
		{
			RPCVAL.Token = POINTER_PTR
		}
	case 347:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2646
		{
			for i := range RPCDollar[5].Params {
				if RPCDollar[5].Params[i].Name == "" {
					RPCDollar[5].Params[i].Name = fmt.Sprintf("Param%d", i)
				}
				if RPCDollar[5].Params[i].Type.Is(TypePointer) && RPCDollar[5].Params[i].Attrs.Pointer == PointerTypeNone {
					RPCDollar[5].Params[i].Attrs.Pointer = PointerTypeRefWeak
				}
			}
			RPCVAL.Operation = &Operation{Attrs: RPCDollar[1].Attr.Operation(), Type: RPCDollar[2].Type, Name: RPCDollar[3].Ident, Params: RPCDollar[5].Params}
		}
	case 348:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2658
		{
			RPCVAL.Operation = &Operation{Attrs: RPCDollar[1].Attr.Operation(), Type: RPCDollar[2].Type, Name: RPCDollar[3].Ident}
		}
	case 349:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2664
		{
			RPCVAL.Params = append(RPCVAL.Params, RPCDollar[3].Param)
		}
	case 350:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2668
		{
			RPCVAL.Params = []*Param{RPCDollar[1].Param}
		}
	case 351:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2674
		{
			RPCDollar[3].Declarator.Type = RPCDollar[3].Declarator.Type.Append(RPCDollar[2].Type)
			RPCVAL.Param = &Param{Attrs: RPCDollar[1].Attr.Param(), Name: RPCDollar[3].Declarator.Name, Type: RPCDollar[3].Declarator.Type}
			if RPCVAL.Param.Attrs.Usage.ContextHandle && !RPCDollar[3].Declarator.Type.Base().Is(TypeStruct) {
				ref := &Type{Kind: TypeRef, Name: "ndr_context_handle"}
				if typ, ok := lookupType(RPClex, ref.Name); !ok {
					// XXX: defer type resolution.
					RPCVAL.Param.Type = RPCVAL.Param.Type.AppendAfterPointer(pushRef(RPClex, ref))
				} else {
					RPCVAL.Param.Type = RPCVAL.Param.Type.AppendAfterPointer(typ)
				}
			}
		}
	case 352:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2688
		{
			RPCDollar[2].Declarator.Type = RPCDollar[2].Declarator.Type.Append(RPCDollar[1].Type)
			attrs := pAttr{Direction: Direction{In: true}}
			RPCVAL.Param = &Param{Attrs: attrs.Param(), Name: RPCDollar[2].Declarator.Name, Type: RPCDollar[2].Declarator.Type}
		}
	case 353:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2696
		{
			RPCVAL.AttrType = pAttrType{IN, pAttr{}}
		}
	case 354:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2700
		{
			RPCVAL.AttrType = pAttrType{OUT, pAttr{}}
		}
	case 355:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2706
		{
			for i := range RPCDollar[3].Params {
				if RPCDollar[3].Params[i].Name == "" {
					RPCDollar[3].Params[i].Name = fmt.Sprintf("Param%d", i)
				}
			}
			RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].Declarator.Name, Type: &Type{Kind: TypeFunc, Func: &Func{Params: RPCDollar[3].Params}, Elem: RPCDollar[1].Declarator.Type}}
		}
	case 356:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2715
		{
			RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].Declarator.Name, Type: &Type{Kind: TypeFunc, Func: &Func{}, Elem: RPCDollar[1].Declarator.Type}}
		}
	case 357:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2726
		{
			RPCVAL.Type = &Type{Kind: TypeError}
		}
	case 358:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2730
		{
			RPCVAL.Type = &Type{Kind: TypeCharset}

			switch RPCDollar[1].Token {
			case ISO_LATIN_1:
				RPCVAL.Type.Charset = CharsetISO_Latin_1
			case ISO_MULTILINGUAL:
				RPCVAL.Type.Charset = CharsetISO_Multilingual
			case ISO_UCS:
				RPCVAL.Type.Charset = CharsetISO_UCS
			}
		}
	case 359:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2745
		{
			RPCVAL.Token = ISO_LATIN_1
		}
	case 360:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2749
		{
			RPCVAL.Token = ISO_MULTILINGUAL
		}
	case 361:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2753
		{
			RPCVAL.Token = ISO_UCS
		}
	}
	goto RPCstack /* stack new state and value */
}
